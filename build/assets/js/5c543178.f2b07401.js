"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[73421],{31731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Architecture/data standard/verifiable credential format/VP format","title":"Verifiable Presentation format","description":"- Subject","source":"@site/versioned_docs/version-1.000/Architecture/data standard/verifiable credential format/VP format.md","sourceDirName":"Architecture/data standard/verifiable credential format","slug":"/Architecture/data standard/verifiable credential format/VP format","permalink":"/architecture/docs/1.000/Architecture/data standard/verifiable credential format/VP format","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.000/Architecture/data standard/verifiable credential format/VP format.md","tags":[],"version":"1.000","frontMatter":{"puppeteer":{"pdf":{"format":"A4","displayHeaderFooter":true,"landscape":false,"scale":0.8,"margin":{"top":"1.2cm","right":"1cm","bottom":"1cm","left":"1cm"}},"image":{"quality":100,"fullPage":false}}},"sidebar":"tutorialSidebar","previous":{"title":"Verifiable Crendentials format","permalink":"/architecture/docs/1.000/Architecture/data standard/verifiable credential format/VC format_ko"},"next":{"title":"Verifiable Presentation format","permalink":"/architecture/docs/1.000/Architecture/data standard/verifiable credential format/VP format_ko"}}');var r=t(74848),s=t(28453);const a={puppeteer:{pdf:{format:"A4",displayHeaderFooter:!0,landscape:!1,scale:.8,margin:{top:"1.2cm",right:"1cm",bottom:"1cm",left:"1cm"}},image:{quality:100,fullPage:!1}}},l="Verifiable Presentation format",d={},o=[{value:"Revision History",id:"revision-history",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Overview",id:"1-overview",level:2},{value:"1.1. Reference Documents",id:"11-reference-documents",level:3},{value:"2. General Regulations",id:"2-general-regulations",level:2},{value:"2.1. VP Structure",id:"21-vp-structure",level:3},{value:"2.1.1. Data Types and Constants",id:"211-data-types-and-constants",level:4},{value:"2.1.2. <code>Vp</code> object",id:"212-vp-object",level:4},{value:"2.1.2.1. Presentation Metadata",id:"2121-presentation-metadata",level:5},{value:"2.1.2.2. Verifiable Credential(s)",id:"2122-verifiable-credentials",level:5},{value:"2.1.2.3. Proof(s)",id:"2123-proofs",level:5}];function c(e){const n={a:"a",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"verifiable-presentation-format",children:"Verifiable Presentation format"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Subject\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Definition of VP (Verifiable Presentation) data format"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Author: Kang Young-ho"}),"\n",(0,r.jsx)(n.li,{children:"Date: 2024-09-03"}),"\n",(0,r.jsx)(n.li,{children:"Version: v1.0.0"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Version"}),(0,r.jsx)(n.th,{children:"Date"}),(0,r.jsx)(n.th,{children:"Changes"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"v1.0.0"}),(0,r.jsx)(n.td,{children:"2024-09-03"}),(0,r.jsx)(n.td,{children:"Initial version"})]})})]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#1-overview",children:"1. Overview"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#11-reference-documents",children:"1.1. Reference Documents"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#2-general-regulations",children:"2. General Regulations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#21-vp-structure",children:"2.1. VP Structure"}),"\n- ",(0,r.jsx)(n.a,{href:"#211-data-types-and-constants",children:"2.1.1. Data Types and Constants"}),"\n- ",(0,r.jsxs)(n.a,{href:"#212-vp-object",children:["2.1.2. ",(0,r.jsx)(n.code,{children:"Vp"})," Object"]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"1-overview",children:"1. Overview"}),"\n",(0,r.jsxs)(n.p,{children:["This document defines the data structure of Verifiable Presentation (VP) used in OpenDID.\nThe basic regulations comply with W3C's ",(0,r.jsx)(n.code,{children:"[VC-MODEL]"})," (Verifiable Credentials Data Model v2.0)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"VP Structure",src:t(19367).A+"",width:"1169",height:"687"}),"\n[Figure 1]"]}),"\n",(0,r.jsx)(n.h3,{id:"11-reference-documents",children:"1.1. Reference Documents"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Reference"}),(0,r.jsx)(n.th,{children:"Document Name"}),(0,r.jsx)(n.th,{children:"Location"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[VC-MODEL]"}),(0,r.jsx)(n.td,{children:"Verifiable Credentials Data Model v2.0"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/vc-data-model-2.0/",children:"https://www.w3.org/TR/vc-data-model-2.0/"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[VC-IMPL]"}),(0,r.jsx)(n.td,{children:"Verifiable Credentials Implementation Guidelines 1.0"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://www.w3.org/TR/vc-imp-guide/",children:"https://www.w3.org/TR/vc-imp-guide/"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[VC-DATA]"}),(0,r.jsx)(n.td,{children:"Verifiable Credential Data Integrity 1.0"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://w3c.github.io/vc-data-integrity",children:"https://w3c.github.io/vc-data-integrity"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[OSD]"}),(0,r.jsx)(n.td,{children:"OpenDID Schema Definition Language"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[DATA-SPEC]"}),(0,r.jsx)(n.td,{children:"(OpenDID) Data Specification"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"[VC-FORMAT]"}),(0,r.jsx)(n.td,{children:"(OpenDID) VC Format"}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"2-general-regulations",children:"2. General Regulations"}),"\n",(0,r.jsx)(n.h3,{id:"21-vp-structure",children:"2.1. VP Structure"}),"\n",(0,r.jsxs)(n.p,{children:["Refer to ",(0,r.jsx)(n.code,{children:"[DATA-SPEC]"})," for items not defined here."]}),"\n",(0,r.jsx)(n.h4,{id:"211-data-types-and-constants",children:"2.1.1. Data Types and Constants"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def string vpId: "VP id"\n\ndef enum VP_TYPE: "VP Type"\n{\n    "VerifiablePresentation": "VP",\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"212-vp-object",children:["2.1.2. ",(0,r.jsx)(n.code,{children:"Vp"})," object"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Vp"})," object is a Verifiable Presentation submitted by the Holder to the Verifier, structured as follows:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Presentation Metadata"}),"\n",(0,r.jsx)(n.li,{children:"Verifiable Credential(s)"}),"\n",(0,r.jsx)(n.li,{children:"Proof(s)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def object Vp: "VP object"\n{\n    //---------------------------------------------------------------------------\n    // Presentation Metadata\n    //---------------------------------------------------------------------------\n    + array(url)     "@context"     : "JSON-LD context"\n        , value(["https://www.w3.org/ns/credentials/v2"])\n    + vpId           "id"           : "VP id"\n    + array(VP_TYPE) "type"         : "List of VP types"\n    + did            "holder"       : "Holder DID"\n    + utcDatetime    "validFrom"    : "VP validity start date-time"\n    + utcDatetime    "validUntil"   : "VP validity end date-time"\n    + multibase      "verifierNonce": "verifier nonce", byte_length(16)\n\n    //---------------------------------------------------------------------------\n    // Verifiable Credential(s)\n    //---------------------------------------------------------------------------\n    + array(object) "verifiableCredential": "List of VCs"\n    {\n        //--- Credential Metadata ---\n        // Includes all metadata of the VC\n        // ...omitted...\n\n        //--- Claim(s) ---\n        + object "credentialSubject": "Credential subject"\n        {\n            + did          "id"    : "Subject DID"\n            // Includes only selected claims\n            + array(Claim) "claims": "List of claims", min_count(1)\n        }\n\n        //--- Proof(s) ---\n        + object "proof": "Issuer signature for VC"\n        {\n            + PROOF_TYPE    "type"              : "Proof type"\n            + utcDatetime   "created"           : "Proof creation date-time"\n            + didKeyUrl     "verificationMethod": "Key URL used for proof signature"\n            + PROOF_PURPOSE "proofPurpose"      : "Proof purpose", value("assertionMethod")\n            + select(1)\n            {\n                // When all claims are to be submitted\n                ^ multibase        "proofValue"    : "Signature values for all claims"\n                // When only selected claims are submitted\n                // When only selected claims are submitted, include the individual signatures for each selected claim in order\n                ^ array(multibase) "proofValueList": "The list of signature values for individual claims"\n            }\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // Proof(s)\n    //---------------------------------------------------------------------------\n    // If VERIFY_AUTH_TYPE involves multiple user authentications (e.g., "PIN and BIO"),\n    // it should be included in the "proofs" array instead of "proof".\n    + select(1)\n    {\n        // when number of user authentications = 1\n        ^ AssertProof        "proof" : "Holder proof = Holder signature for VP"\n        // when number of user authentications >= 2\n        ^ array(AssertProof) "proofs": "List of holder proofs", min_count(2)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"2121-presentation-metadata",children:"2.1.2.1. Presentation Metadata"}),"\n",(0,r.jsx)(n.p,{children:"Contains information about the VP."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/id"}),": The VP id, recommended to be UUID type, but various formats can be used depending on implementation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/type"}),": The VP type depends on the implementation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/holder"}),": The DID of the holder presenting the VP."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/validFrom"}),", ",(0,r.jsx)(n.code,{children:"~/validUntil"}),": The validity period of the VP, expressed in UTC offset 0."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/verifierNonce"}),": The verifier nonce\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Must match the value specified in ",(0,r.jsx)(n.code,{children:"VerifyProfile:~/profile/process/verifierNonce"})," by the verifier."]}),"\n",(0,r.jsxs)(n.li,{children:["Used for two purposes:\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"To confirm that the submission is in response to the verifier's request (the verifier needs to verify the match)."}),"\n",(0,r.jsx)(n.li,{children:"To prevent the duplicate submission of the VP."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"2122-verifiable-credentials",children:"2.1.2.2. Verifiable Credential(s)"}),"\n",(0,r.jsx)(n.p,{children:"Contains the submitted VCs, the selected claims within those VCs, and the signatures for those claims."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/verifiableCredential[]/"}),": List of submitted VCs\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"credentialSubject/claims[]"}),": Includes only the selected claims"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"proof"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Does ",(0,r.jsx)(n.strong,{children:"not"})," include the full signature ",(0,r.jsx)(n.code,{children:"proofValue"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"proofValueList"}),": Includes only the individual signatures for the selected claims in the order of the submitted claims"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"2123-proofs",children:"2.1.2.3. Proof(s)"}),"\n",(0,r.jsx)(n.p,{children:"Contains the signature of the holder presenting the VP."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"~/proof"}),": Holder's signature"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},19367:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/vp_structure-b091c94dbd8bfaa75b8edb0bbd2fe1b4.svg"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);