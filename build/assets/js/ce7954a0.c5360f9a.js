"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5607],{16616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Architecture/rules/coding_style","title":"OpenDID Code Application Guidelines","description":"Reference Guides","source":"@site/versioned_docs/version-1.100/Architecture/rules/coding_style.md","sourceDirName":"Architecture/rules","slug":"/Architecture/rules/coding_style","permalink":"/architecture/docs/1.100/Architecture/rules/coding_style","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.100/Architecture/rules/coding_style.md","tags":[],"version":"1.100","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"OpenDID Schema Definition Language","permalink":"/architecture/docs/1.100/Architecture/guide/osd/OpenDID Schema Definition Language_ko"},"next":{"title":"OpenDID \ucf54\ub4dc \uc801\uc6a9 \uaddc\uc57d","permalink":"/architecture/docs/1.100/Architecture/rules/coding_style_ko"}}');var s=i(74848),r=i(28453);const l={},a="OpenDID Code Application Guidelines",o={},d=[{value:"Reference Guides",id:"reference-guides",level:2},{value:"1. Source File Structure",id:"1-source-file-structure",level:2},{value:"Example",id:"example",level:3},{value:"1.2 Naming Conventions by Type",id:"12-naming-conventions-by-type",level:2},{value:"Identifier Types",id:"identifier-types",level:3},{value:"1.3 Naming Conventions",id:"13-naming-conventions",level:3},{value:"API URL",id:"api-url",level:4},{value:"Prefixes",id:"prefixes",level:5},{value:"Prepositions",id:"prepositions",level:5},{value:"Suffixes",id:"suffixes",level:5},{value:"Overloading",id:"overloading",level:5},{value:"1.4 Formatting",id:"14-formatting",level:2},{value:"Indentation",id:"indentation",level:3},{value:"Parentheses",id:"parentheses",level:3},{value:"Array Initialization Example",id:"array-initialization-example",level:3},{value:"1.5 Comments",id:"15-comments",level:2},{value:"Example",id:"example-1",level:3},{value:"1.6 Exception Handling",id:"16-exception-handling",level:2},{value:"Example",id:"example-2",level:3},{value:"2. Applying IntelliJ Formatter",id:"2-applying-intellij-formatter",level:2},{value:"Google Formatter",id:"google-formatter",level:3},{value:"Naver Formatter",id:"naver-formatter",level:3},{value:"Applying the Formatter",id:"applying-the-formatter",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",string:"string",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"opendid-code-application-guidelines",children:"OpenDID Code Application Guidelines"})}),"\n",(0,s.jsx)(n.h2,{id:"reference-guides",children:"Reference Guides"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.oracle.com/java/technologies/javase/codeconventions-contents.html",children:"Oracle Java Coding Style Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://google.github.io/styleguide/javaguide.html",children:"Google Java Style Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://naver.github.io/hackday-conventions-java/",children:"NAVER Campus Hackday Java Coding Convention"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"1-source-file-structure",children:"1. Source File Structure"}),"\n",(0,s.jsx)(n.p,{children:"Source files should be organized in the following order:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"License/Copyright Information (if applicable)"}),"\n",(0,s.jsx)(n.li,{children:"Package Information"}),"\n",(0,s.jsx)(n.li,{children:"Import Information"}),"\n",(0,s.jsx)(n.li,{children:"Top-level Class"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each section should be separated by a blank line."}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'/* \n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      <http://www.apache.org/licenses/LICENSE-2.0>\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License. \n */\npackage org.omnione.did.entity;\n\nimport static org.omnione.did.util.DidUtil.generateDid;\n\nimport org.omnione.did.dto.UserDto;\nimport org.omnione.did.dto.WalletDto;\n\n// Class definition\npublic class Tas {\n    ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"12-naming-conventions-by-type",children:"1.2 Naming Conventions by Type"}),"\n",(0,s.jsx)(n.h3,{id:"identifier-types",children:"Identifier Types"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Convention"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Package"}),(0,s.jsx)(n.td,{children:"Use only lowercase letters and digits, preferably one word, group consecutive words together"}),(0,s.jsx)(n.td,{children:"com.raonsecure.omnione.did, com.raonsecure.didcomm.v2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Import"}),(0,s.jsx)(n.td,{children:"Write static imports in one block, separate import blocks with a blank line"}),(0,s.jsx)(n.td,{children:"import static com.raonsecure.opendid.util.DidUtil;\\n\\nimport com.raonsecure.opendid.dto.UserDto;\\nimport com.raonsecure.opendid.dto.WalletDto;"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Class"}),(0,s.jsx)(n.td,{children:"UpperCamelCase, generally use nouns, express clearly with simple word combinations"}),(0,s.jsx)(n.td,{children:"class User; class UserDto; class CredentialService; class OpenApiConfiguration;"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Interface"}),(0,s.jsx)(n.td,{children:"UpperCamelCase, generally use nouns, adjectives; other rules are the same as for Classes"}),(0,s.jsx)(n.td,{children:"interface Authenticator; interface SecretStore;"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Method"}),(0,s.jsx)(n.td,{children:"lowerCamelCase, generally use verbs, use plural nouns if the result is plural"}),(0,s.jsx)(n.td,{children:"run(); runFast(); generateDefaultKeyPair(); getServiceId(); userToUserDto();"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Constant"}),(0,s.jsx)(n.td,{children:'UPPER_SNAKE_CASE, use underscores "_" to separate words; use standard variable rules for local constants'}),(0,s.jsxs)(n.td,{children:["static final int MIN_WIDTH = 4; static final Joiner COMMA_JOINER = Joiner.on(','); static final ImmutableList",(0,s.jsx)(n.string,{children:' NAMES = ImmutableList.of("Ed", "Ann"); static final Map<String, Integer> AGES = ImmutableMap.of("Ed", 35, "Ann", 32); static final SomeMutableType[] EMPTY_ARRAY = {};'})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Variable"}),(0,s.jsx)(n.td,{children:"lowerCamelCase, use lowercase for the first word, start internal words with uppercase, use short words for clarity"}),(0,s.jsx)(n.td,{children:'static String nonFinal = "non-final"; final String nonStatic = "non-static"; bool isSuccess = true;'})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"13-naming-conventions",children:"1.3 Naming Conventions"}),"\n",(0,s.jsx)(n.h4,{id:"api-url",children:"API URL"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Utilize HTTP methods and do not include actions in the URL.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g. (X) POST | /create-user (O) POST | /user"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Do not include file extensions in URIs."}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"HTTP Method"}),(0,s.jsx)(n.th,{children:"Prefix"}),(0,s.jsx)(n.th,{children:"Usage"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"request"}),(0,s.jsx)(n.td,{children:"Registration, transaction initiation, creation (VC), data requests (nonce, issue profile), DH, verification, reporting loss"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"get"}),(0,s.jsx)(n.td,{children:"Retrieval (vp profile)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PATCH"}),(0,s.jsx)(n.td,{children:"update"}),(0,s.jsx)(n.td,{children:"Transaction completion, data update"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DELETE"}),(0,s.jsx)(n.td,{children:"delete"}),(0,s.jsx)(n.td,{children:"Revocation"})]})]})]}),"\n",(0,s.jsx)(n.h5,{id:"prefixes",children:"Prefixes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"'set' - Change specific state values based on input result\npublic User setUserApproveStatus(Result result)\n\n'find' - Retrieve data\npublic Data findData(String data){}\n\n'input' - Input data\npublic Data inputData(HashMap data){}\n\n'update' - Modify data\npublic Data updateData(HashMap data){}\n\n'delete' - Delete data\npublic void deleteData(String data){}\n\n'initialize' - Initialize data or objects\npublic Data initializeData(String data){}\n\n'is' - Return type is boolean\npublic boolean isData(String Data){}\n\n'load' - Load data\npublic Data loadData(){}\n\n'has' - Check for the presence of data\npublic boolean hasData(){}\n\n'create' - Create a new object\npublic Account createAccount(Data data){}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"prepositions",children:"Prepositions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"A'By'B - Perform A based on B\npublic void getUserByName(String name) {}\n\nA'to'B - Change A to B\npublic String toString() {}\npublic B aToB(A a) {}\n\nA'And'B - Perform A and B simultaneously\npublic void doShoutAndJump() {}\n\nA'With'B - Perform A with B\npublic void findUserWithWallet(String userId) {}\n\nA'Then'B - Perform B after A\npublic void doJumpThenFly() {}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"suffixes",children:"Suffixes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"A's' - Use the suffix 's' when the result is plural\npublic void getMembers(){}\n\nA'Controller' - Use the suffix 'Controller' for classes that handle HTTP requests\npublic class UserController {}\n\nA'Service' - Use the suffix 'Service' for classes that handle business logic\npublic class UserService {}\n\nA'Repository' - Use the suffix 'Repository' for classes that handle data access\npublic interface UserRepository {}\n\nA'Config' - Use the suffix 'Config' for classes that handle application configuration\npublic class WebConfig {}\n\nA'Exception' - Use the suffix 'Exception' for classes that handle exceptions\npublic class UserException {}\n\nA'Utils' - Use the suffix 'Utils' for utility classes\npublic class DidUtils {}\n"})}),"\n",(0,s.jsx)(n.h5,{id:"overloading",children:"Overloading"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// **Method overloading with the same number of parameters**\npublic Profile getMemberProfile (int id)\npublic Profile getMemberProfile (String name) \n\n// **Preferably declare as shown below (recommended)**\npublic Profile getMemberProfileById (int id)\npublic Profile getMemberProfileByName (String name) \n"})}),"\n",(0,s.jsx)(n.h2,{id:"14-formatting",children:"1.4 Formatting"}),"\n",(0,s.jsx)(n.h3,{id:"indentation",children:"Indentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Indentation should be +4"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"parentheses",children:"Parentheses"}),"\n",(0,s.jsx)(n.p,{children:"For blocks using multiple lines (e.g., if/else, try/catch/finally), you can place the closing parenthesis on a new line."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Allowed"}),(0,s.jsx)(n.th,{children:"Not Allowed"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"if/else"}),(0,s.jsx)(n.td,{children:"if (isActive()) {\\n    doNothing();\\n} else {\\n}"}),(0,s.jsx)(n.td,{children:"if (isActive()) {\\n    doNothing();\\n} else {} // line break needed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"try/catch/finally"}),(0,s.jsx)(n.td,{children:"try {\\n    doNothing();\\n} catch(Exception ex) {\\n}"}),(0,s.jsx)(n.td,{children:"try {\\n    doNothing();\\n} catch(Exception ex) {} // line break needed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"In other situations, you can close parentheses without line breaks"}),(0,s.jsx)(n.td,{children:"void doNothing() {}"}),(0,s.jsx)(n.td,{children:"void doNothingElse() {\\n}"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"array-initialization-example",children:"Array Initialization Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"int[] numbers = {1, 2, 3, 4, 5};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"15-comments",children:"1.5 Comments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Comments should be written for classes, methods, and important logic."}),"\n",(0,s.jsx)(n.li,{children:"Use JavaDoc style."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"/**\n * This class represents a User in the system.\n */\npublic class User {\n    // User's name\n    private String name;\n\n    /**\n     * Retrieves the name of the user.\n     * \n     * @return the name of the user\n     */\n    public String getName() {\n        return name;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"16-exception-handling",children:"1.6 Exception Handling"}),"\n",(0,s.jsx)(n.p,{children:"Write exception messages consistently"}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'try {\n    // Code that may throw an exception\n} catch (SpecificException ex) {\n    logger.error("Specific error occurred: {}", ex.getMessage());\n    throw new CustomException("Detailed message", ex);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"2-applying-intellij-formatter",children:"2. Applying IntelliJ Formatter"}),"\n",(0,s.jsx)(n.h3,{id:"google-formatter",children:"Google Formatter"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml",children:"Google Formatter"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"naver-formatter",children:"Naver Formatter"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/naver/hackday-conventions-java/blob/master/rule-config/naver-intellij-formatter.xml",children:"Naver Formatter"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"applying-the-formatter",children:"Applying the Formatter"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Windows: File > Settings > Code Style"}),"\n",(0,s.jsx)(n.li,{children:"macOS: Preferences > Code Style"}),"\n",(0,s.jsx)(n.li,{children:"Click the gear icon at the top, and select Import Scheme > IntelliJ IDEA code style scheme"}),"\n",(0,s.jsxs)(n.li,{children:["Select the XML file and apply the code style globally\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Windows: Ctrl + Alt + L"}),"\n",(0,s.jsx)(n.li,{children:"macOS: Cmd + Option + L"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Consider implementing a workflow to automatically check code style and apply formatting during future GitHub pull requests. For instance, you can use GitHub Actions to integrate static analysis tools and formatters."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);