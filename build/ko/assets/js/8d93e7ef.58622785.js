"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[18370],{11172:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Architecture/guide/osd/OpenDID Schema Definition Language","title":"OpenDID Schema Definition Language","description":"- Subject: Syntax definition for expressing JSON data format","source":"@site/versioned_docs/version-1.200/Architecture/guide/osd/OpenDID Schema Definition Language.md","sourceDirName":"Architecture/guide/osd","slug":"/Architecture/guide/osd/OpenDID Schema Definition Language","permalink":"/architecture/ko/docs/Architecture/guide/osd/OpenDID Schema Definition Language","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.200/Architecture/guide/osd/OpenDID Schema Definition Language.md","tags":[],"version":"1.200","frontMatter":{"puppeteer":{"pdf":{"format":"A4","displayHeaderFooter":true,"landscape":false,"scale":0.8,"margin":{"top":"1.2cm","right":"1cm","bottom":"1cm","left":"1cm"}},"image":{"quality":100,"fullPage":false}}},"sidebar":"tutorialSidebar","previous":{"title":"Glossary","permalink":"/architecture/ko/docs/Architecture/guide/glossary"},"next":{"title":"OpenDID Schema Definition Language","permalink":"/architecture/ko/docs/Architecture/guide/osd/OpenDID Schema Definition Language_ko"}}');var r=i(74848),t=i(28453);const a={puppeteer:{pdf:{format:"A4",displayHeaderFooter:!0,landscape:!1,scale:.8,margin:{top:"1.2cm",right:"1cm",bottom:"1cm",left:"1cm"}},image:{quality:100,fullPage:!1}}},l="OpenDID Schema Definition Language",d={},c=[{value:"Revision History",id:"revision-history",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Overview",id:"1-overview",level:2},{value:"2. Basic Rules",id:"2-basic-rules",level:2},{value:"2.1. Data Types",id:"21-data-types",level:3},{value:"2.2. User-Defined Types",id:"22-user-defined-types",level:3},{value:"2.3. Message Definitions",id:"23-message-definitions",level:3},{value:"2.3.1. Member Definitions",id:"231-member-definitions",level:4},{value:"2.3.2. Group Definitions",id:"232-group-definitions",level:4},{value:"2.3.3. Exclusive Choice Definitions",id:"233-exclusive-choice-definitions",level:4},{value:"2.4. Annotation",id:"24-annotation",level:3},{value:"2.5. Comments",id:"25-comments",level:3},{value:"2.6. Examples",id:"26-examples",level:3},{value:"2.6.1. Request Message",id:"261-request-message",level:4},{value:"2.6.2. Response Message",id:"262-response-message",level:4},{value:"2.6.3. Other Examples",id:"263-other-examples",level:4},{value:"3. Recommendations",id:"3-recommendations",level:2},{value:"3.1. Naming Convention Recommendations",id:"31-naming-convention-recommendations",level:3},{value:"4. Syntax",id:"4-syntax",level:2},{value:"4.1. Types",id:"41-types",level:3},{value:"4.2. Literals and Identifiers",id:"42-literals-and-identifiers",level:3},{value:"4.3. User Type Declarations",id:"43-user-type-declarations",level:3},{value:"4.3.1. <code>string</code> User Type Declaration",id:"431-string-user-type-declaration",level:4},{value:"4.3.2. <code>int</code> User Type Declarations",id:"432-int-user-type-declarations",level:4},{value:"4.3.3. <code>float</code> User Type Declarations",id:"433-float-user-type-declarations",level:4},{value:"4.3.4. <code>bool</code> User Type Declarations",id:"434-bool-user-type-declarations",level:4},{value:"4.3.5. <code>enum</code> Type Declarations",id:"435-enum-type-declarations",level:4},{value:"4.3.6. <code>object</code> User Type Declarations",id:"436-object-user-type-declarations",level:4},{value:"4.3.7. <code>array</code> User Type Declarations",id:"437-array-user-type-declarations",level:4}];function o(e){const n={a:"a",br:"br",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"opendid-schema-definition-language",children:"OpenDID Schema Definition Language"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Subject: Syntax definition for expressing JSON data format"}),"\n",(0,r.jsx)(n.li,{children:"Author: Open Source Development Team, Kang Young-ho"}),"\n",(0,r.jsx)(n.li,{children:"Date: 2024-09-03"}),"\n",(0,r.jsx)(n.li,{children:"Version: v1.0.0"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Version"}),(0,r.jsx)(n.th,{children:"Date"}),(0,r.jsx)(n.th,{children:"Change Details"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"v1.0.0"}),(0,r.jsx)(n.td,{children:"2024-09-03"}),(0,r.jsx)(n.td,{children:"Initial version"})]})})]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#1-overview",children:"1. Overview"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#2-basic-rules",children:"2. Basic Rules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#21-data-types",children:"2.1. Data Types"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#22-user-defined-types",children:"2.2. User-Defined Types"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#23-message-definitions",children:"2.3. Message Definitions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#231-member-definitions",children:"2.3.1. Member Definitions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#232-member-group-definitions",children:"2.3.2. Member Group Definitions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#233-exclusive-choice-definitions",children:"2.3.3. Exclusive Choice Definitions"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#24-annotation",children:"2.4. Annotation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#25-comments",children:"2.5. Comments"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#26-examples",children:"2.6. Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#261-request-message",children:"2.6.1. Request Message"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#262-response-message",children:"2.6.2. Response Message"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#263-other-examples",children:"2.6.3. Other Examples"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#3-recommendations",children:"3. Recommendations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#31-naming-convention-recommendations",children:"3.1. Naming Convention Recommendations"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#4-syntax",children:"4. Syntax"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#41-types",children:"4.1. Types"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#42-literals-and-identifiers",children:"4.2. Literals and Identifiers"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#43-user-type-declarations",children:"4.3. User Type Declarations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#431-string-user-type-declarations",children:["4.3.1. ",(0,r.jsx)(n.code,{children:"string"})," User Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#432-int-user-type-declarations",children:["4.3.2. ",(0,r.jsx)(n.code,{children:"int"})," User Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#433-float-user-type-declarations",children:["4.3.3. ",(0,r.jsx)(n.code,{children:"float"})," User Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#434-bool-user-type-declarations",children:["4.3.4. ",(0,r.jsx)(n.code,{children:"bool"})," User Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#435-enum-type-declarations",children:["4.3.5. ",(0,r.jsx)(n.code,{children:"enum"})," Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#436-object-user-type-declarations",children:["4.3.6. ",(0,r.jsx)(n.code,{children:"object"})," User Type Declarations"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#437-array-user-type-declarations",children:["4.3.7. ",(0,r.jsx)(n.code,{children:"array"})," User Type Declarations"]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"1-overview",children:"1. Overview"}),"\n",(0,r.jsx)(n.p,{children:"JSON (JavaScript Object Notation) is a text-based format for representing structured data based on JavaScript object syntax.\nIt is widely used in web development due to its simplicity and readability compared to XML."}),"\n",(0,r.jsx)(n.p,{children:"However, JSON has some limitations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Increased data size."}),"\n",(0,r.jsx)(n.li,{children:"Limited data types."}),"\n",(0,r.jsx)(n.li,{children:"Difficulty specifying constraints."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This document aims to alleviate these drawbacks and minimize confusion between developers and operators by defining a notation for JSON data formats.\nThe following aspects, which are hard to express with JSON syntax alone, are clearly defined:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"optional/mandatory attribute"}),"\n",(0,r.jsx)(n.li,{children:"data grouping (including optional/mandatory per data group)"}),"\n",(0,r.jsx)(n.li,{children:"default value"}),"\n",(0,r.jsx)(n.li,{children:"array cardinality"}),"\n",(0,r.jsx)(n.li,{children:"value range (e.g., 1~100)"}),"\n",(0,r.jsx)(n.li,{children:"enumeration"}),"\n",(0,r.jsx)(n.li,{children:"variable item names"}),"\n",(0,r.jsx)(n.li,{children:"select & multiple select"}),"\n"]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"2-basic-rules",children:"2. Basic Rules"}),"\n",(0,r.jsx)(n.h3,{id:"21-data-types",children:"2.1. Data Types"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"abcABC\uac00\ub098\ub2e4"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int"})}),(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"123"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"Floating point"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"10.5"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bool"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"}),", ",(0,r.jsx)(n.code,{children:"false"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"enum"})}),(0,r.jsx)(n.td,{children:"Enumeration"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"object"})}),(0,r.jsx)(n.td,{children:"Object"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{...}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array"})}),(0,r.jsx)(n.td,{children:"Array"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[...]"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"22-user-defined-types",children:"2.2. User-Defined Types"}),"\n",(0,r.jsxs)(n.p,{children:["User-defined types can be declared with the ",(0,r.jsx)(n.code,{children:"def"})," statement."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Basic types (string, int, float, bool)"}),"\n",(0,r.jsx)(n.li,{children:"Enum types"}),"\n",(0,r.jsx)(n.li,{children:"Object types"}),"\n",(0,r.jsx)(n.li,{children:"Array types"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def string uuid : "UUID string", length(36)\ndef int    score: "Score", min_value(0), max_value(100)\n\ndef enum COLOR: "Selectable colors"\n{\n    "FF0000": "Red",\n    "00FF00": "Green",\n    "0000FF": "Blue",\n}\n\ndef enum AUTH_TYPE: "Authentication type"\n{\n    1: "No Authentication", 2: "PIN", 3: "BIO"\n}\n\ndef object Proof: "Proof object"\n{\n    + string "kid"  : "Key id"\n    + string "alg"  : "signature algorithm"\n    + string "sig"  : "signature value"\n    - int    "nonce": "nonce"\n}\n\ndef object SampleObject: "Sample object"\n{\n    + array(object) "aList": "List of something"\n    {\n        + string "a": "A"\n        - string "b": "B"\n        + string "c": "C"\n    }\n    - array(Proof) "proof": "List of proof", min_count(1), max_count(3)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"23-message-definitions",children:"2.3. Message Definitions"}),"\n",(0,r.jsx)(n.p,{children:"JSON messages can be defined in one of the following two ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["User-defined object type: ",(0,r.jsx)(n.code,{children:"def object ..."})]}),"\n",(0,r.jsxs)(n.li,{children:["User-defined array type: ",(0,r.jsx)(n.code,{children:"def array(?) ..."})]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"231-member-definitions",children:"2.3.1. Member Definitions"}),"\n",(0,r.jsx)(n.p,{children:"Child items within an object are called members, and these are the following types of members:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple member: basic type or user-defined type derived from a basic type"}),"\n",(0,r.jsx)(n.li,{children:"Object member"}),"\n",(0,r.jsx)(n.li,{children:"Array member"}),"\n",(0,r.jsx)(n.li,{children:"Group: a collection of two or more members grouped together"}),"\n",(0,r.jsx)(n.li,{children:"Select: one or more members selected exclusively"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each member definition is prefixed with a presence symbol indicating whether it is mandatory or optional."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Presence symbol:\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"+"}),": mandatory"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-"}),": optional"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"232-group-definitions",children:"2.3.2. Group Definitions"}),"\n",(0,r.jsxs)(n.p,{children:["To group two or more members into one collective unit, use the ",(0,r.jsx)(n.code,{children:"group"})," statement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def object Obj: "sample object"\n{\n    + string "address": "user\'s home address"\n    - group\n    {\n        + string "given_name" : "given name"\n        + string "family_name": "family name"\n        - int    "age"        : "age"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"233-exclusive-choice-definitions",children:"2.3.3. Exclusive Choice Definitions"}),"\n",(0,r.jsxs)(n.p,{children:["To express that 1 to n members out of a group appear exclusively, use the ",(0,r.jsx)(n.code,{children:"select"})," statement.\nWithin the ",(0,r.jsx)(n.code,{children:"select"})," statement, the ",(0,r.jsx)(n.code,{children:"^"})," symbol is used instead of the presence symbol to indicate exclusivity."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def object Obj: "sample object"\n{\n    + select(1)   // select(1..2) means 1 to 2\n    {\n        ^ string "mobile": "mobile phone number"\n        ^ string "email" : "email address"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"24-annotation",children:"2.4. Annotation"}),"\n",(0,r.jsx)(n.p,{children:"This is a static program comment that functions similarly to annotations in the Java language. It is used to flexibly extend the language. The currently defined annotations are as follows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@spread(ObjectType)"}),": Inherits an existing object, i.e., unfolds the members of an existing defined object within the current object."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u25a0 @spread Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'// Define a shape object with common properties x and y coordinates for all shapes\ndef object Shape: "Shape"\n{\n    + int "x": "x coordinate"\n    + int "y": "y coordinate"\n}\n\n// Define a rectangle object that includes x, y coordinates from shape and adds width and height\ndef object Rectangle: "Rectangle"\n{\n    @spread(Shape)  // Inherit shape object\n\n    + int "width" : "Width"\n    + int "height": "Height"\n}\n\n// Define a circle object that includes x, y coordinates from shape and adds radius\ndef object Circle: "Circle"\n{\n    @spread(Shape)\n\n    + float "radius": "Radius"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Similar to the use of inheritance in object-oriented programming, it fundamentally includes the definition of the parent object and can be useful when defining additional attributes."}),"\n",(0,r.jsx)(n.h3,{id:"25-comments",children:"2.5. Comments"}),"\n",(0,r.jsx)(n.p,{children:"The usage of comments follows Java syntax."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Single-line comment: ",(0,r.jsx)(n.code,{children:"//"})]}),"\n",(0,r.jsxs)(n.li,{children:["Multi-line comment: ",(0,r.jsx)(n.code,{children:"/*"})," ~ ",(0,r.jsx)(n.code,{children:"*/"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"26-examples",children:"2.6. Examples"}),"\n",(0,r.jsx)(n.h4,{id:"261-request-message",children:"2.6.1. Request Message"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Existing Notation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    // <Header>\n    "id"          : "<message-id> message id",\n    "type"        : "<message-type> message type",\n    "txId?"       : "<uuid> transaction id",\n    "cmdId?"      : "<uuid> command id",\n    "callbackUrl?": "<multibase-string> URL to send asynchronous responses",\n    "expireDate?" : "<utc-datetime> expiration date",\n\n    // <Body>\n    "data": {\n        // ...\n    },\n\n    // <Footer>\n    "supplements?": [\n        {\n            "supId"     : "<string> supplement item id",\n            "desc?"     : "<string> description of the content",\n            "mediaType?": "<media-type>",\n            "format?"   : "<string>",\n            "data": {\n                "multibase?": "<multibase-string>",\n                "links?"    : ["<multibase-string[]> URL to fetch data"],\n                "json?"     : {}\n            }\n        }\n        // ...\n    ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"New Notation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'// User-defined types\ndef string messageId  : "message id string", length(28)\ndef string messageType: "message type string"\ndef string uuid       : "UUID string"\ndef string multibase  : "multibase string"\ndef string utcDatetime: "UTC datetime string"\n\ndef enum MEDIA_TYPE: "media type enum"\n{\n    "image"   : "images such as png, jpg, gif",\n    "video"   : "videos such as mp4",\n    "document": "documents such as pdf, doc, xls",\n    "etc"     : "the others",\n}\n\ndef object Supplement: "additional information"\n{\n    + string     "supId"    : "supplement item id"\n    - string     "desc"     : "description of the contents"\n    - MEDIA_TYPE "mediaType": "media type"\n    - string     "format"   : "data format"\n    + object     "data"     : "contents"\n    {\n        + select(1)\n        {\n            ^ multibase        "multibase": "contents in multibase"\n            ^ array(multibase) "links"    : "URL to fetch data", min_count(1)\n            ^ object           "json"     : "contents in JSON", emptiable(false) {...}\n        }\n    }\n}\n\n// Request message\ndef object RequestMessage: "request message"\n{\n    // Header\n    + messageId   "id"        : "message id"\n    + messageType "type"      : "message type"\n    - uuid        "txId"      : "transaction id"\n    - uuid        "cmdId"     : "command id"\n    - utcDatetime "expireDate": "expiration date"\n\n    // Body\n    + object "data": "message body", emptiable(true) {...}\n\n    // Footer\n    - array(Supplement) "supplements": "list of additional items", min_count(1)\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"262-response-message",children:"2.6.2. Response Message"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Existing Notation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    // <Header>\n    "status": "<enum-res-status> [\'success\', \'command\', \'error\']",\n    "txId?" : "<uuid> transaction id",\n\n    // <Body>\n    "data?": { /* ... */ },\n    "command?": {\n        "cmdId"   : "<uuid> command id",\n        "protoId" : "<string> protocol id",\n        "protoUrl": "<multibase-string> URL to invoke",\n        "param"   : { /* parameters */ }\n    },\n    "error?": {\n        "code": "<string> error code",\n        "desc": "<string> error description",\n        "message": "<string> error message for end users"\n    },\n\n    // <Footer>\n    "supplements?": [ { /* ditto */ } ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"New Notation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'// User-defined types\ndef enum RES_STATUS: "response status"\n{\n    "success", "command", "error"\n}\n\n// Response message\ndef object ResponseMessage: "response message"\n{\n    // Header\n    + RES_STATUS "status": "response status"\n    - uuid       "txId"  : "transaction id"\n    \n    // Body\n    + select(1)\n    {\n        // status is \'success\'\n        ^ group\n        {\n            + object            "data"       : "normal response", emptiable(true) {...}\n            - array(Supplement) "supplements": "list of supplement", min_count(1)\n        }\n\n        // status is \'command\'\n        ^ object "command": "command response"\n        {\n            + uuid      "cmdId"    : "command id"\n            + string    "protoId"  : "protocol id"\n            + multibase "protolUrl": "URL to invoke"\n            + object    "param"    : "command parameters", emptiable(true) {...}\n        }\n\n        // status is \'error\'\n        ^ object "error": "error response"\n        {\n            + string "code"   : "error code"\n            + string "desc"   : "error description"\n            + string "message": "error message for end users"\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"263-other-examples",children:"2.6.3. Other Examples"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"propose-dh-ecies"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def enum AES_TYPE: "AES key length"\n{\n    "AES128", "AES256"\n}\n\ndef enum ECC_ALG_TYPE: "ECC algorithm type"\n{\n    "secp256k1", "secp256r1"\n}\n\ndef object RequestProposeDhEcies: "request of propose-dh-ecies"\n{\n    + messageId   "id"   : "message id"\n    + messageType "type" : "message type", value("omn-di/1.0/propose-dh-ecies")\n    + uuid        "cmdId": "command id"\n    + object      "data" : "message body"\n    {\n        - object "candidate": "available algorithm list of the client"\n        {\n            + array(AES_TYPE)     "aesTypeList": "available AES algorithm list", default(["AES256"])\n            + array(ECC_ALG_TYPE) "algTypeList": "available ECC algorithm list", default(["secp256r1"])\n        }\n    }\n}\n\ndef object ResponseProposeDhEcies: "response of propose-dh-ecies"\n{\n    // Header\n    + RES_STATUS "status": "response status", value("success")\n    + uuid       "txId"  : "transaction id"\n\n    // Body\n    + object "data": "response data"\n    {\n        + bool "useDidKey": "false: create temp key, true: use DID key of client"\n        + select(1)\n        {\n            // when using DID key\n            ^ group\n            {\n                + string "da" : "server\'s DA"\n                + string "kid": "ECC key id in the DID Document"\n            }\n\n            // when using temporary key\n            ^ multibase "pubKey": "server\'s temporary key"\n        }\n        + multibase "nonce": "nonce", byte_length(16)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"VC claim object"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def string claimCode: "Claim code"\ndef string vcDigest : "W3C subresource integrity"\n\ndef enum CLAIM_TYPE: "Claim type"\n{\n    "text", "image", "document",\n}\n\ndef enum CLAIM_FORMAT: "Claim format"\n{\n    // text\n    "plain", "html", "xml", "csv",\n    \n    // image\n    "png", "jpg", "gif",\n    \n    // document\n    "txt", "pdf", "word",\n}\n\ndef enum LOCATION: "Claim source data location"\n{\n    "inline": "Value included in \'value\' within VC",\n    "remote": "External link URL",\n    "attach": "Separate attachment file",\n}\n\ndef object Claim: "VC claim object"\n{\n    + claimCode    "code"     : "Claim code"\n    + string       "caption"  : "Claim name"\n    + string       "value"    : "Claim value"\n    + CLAIM_TYPE   "type"     : "Claim type"\n    + CLAIM_FORMAT "format"   : "Claim format"\n    - bool         "hideValue": "Whether to hide the claim value", default(false)\n    - LOCATION     "location" : "Location of the original claim data", default("inline")\n    - vcDigest     "digestSRI": "Hash of the claim value", default(null)\n    - object       "i18n"     : "Claim names in other languages"\n    {\n        + object $lang: "Claim name in other languages", variable_type(LANGUAGE), min_extend(1)\n        {\n            + string   "caption"  : "Claim name"\n            - string   "value"    : "Claim value"\n            - vcDigest "digestSRI": "Hash of the claim value"\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"3-recommendations",children:"3. Recommendations"}),"\n",(0,r.jsx)(n.h3,{id:"31-naming-convention-recommendations",children:"3.1. Naming Convention Recommendations"}),"\n",(0,r.jsx)(n.p,{children:"It is recommended, but not mandatory, to follow the naming conventions for user-defined types as outlined below:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Naming Convention"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Basic"}),(0,r.jsx)(n.td,{children:"lowerCamelCase"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'def string didKeyId: "DID key id"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Enum"}),(0,r.jsx)(n.td,{children:"UPPER_SNAKE_CASE"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'def enum CLAIM_TYPE: "claim type" {...}'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Object"}),(0,r.jsx)(n.td,{children:"UpperCamelCase (PascalCase)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'def object RequestMessage: "request message" {...}'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Array"}),(0,r.jsx)(n.td,{children:"^^"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'def array(int) AuthType: "auth type"'})})]})]})]}),"\n",(0,r.jsx)(n.div,{style:{pageBreakAfter:"always"}}),"\n",(0,r.jsx)(n.h2,{id:"4-syntax",children:"4. Syntax"}),"\n",(0,r.jsx)(n.h3,{id:"41-types",children:"4.1. Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nDataType = PrimitiveType | CollectiveType | EnumType;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nPrimitiveType = "string" | "int" | "float" | "bool";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nCollectiveType = "object" | "array";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nEnumType = "enum";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.h3,{id:"42-literals-and-identifiers",children:"4.2. Literals and Identifiers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nLiteral = IntegerLiteral | FloatLiteral | BooleanLiteral | StringLiteral | NullLiteral | RegularExpressionLiteral;\nIntegerLiteral = ? decimal number ? | ? hexadecimal number ?;\nFloatLiteral = ? floating point number ?;\nBooleanLiteral = "true" | "false";\nStringLiteral = ? printable string ?;\nNullLiteral = "null";\nRegularExpressionLiteral = "/", ? JavaScript regular expression ?, "/";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nLetter = ? a-z ? | ? A-Z ?;\nDigit = ? 0-9 ?;\nDescriptor = \'"\', (StringLiteral | ?? (*empty*)), \'"\';\nIdentifier = (Letter | "_" (* underbar *)), {Letter | Digit | "_"};\n@endebnf\n'})}),"\n",(0,r.jsx)(n.h3,{id:"43-user-type-declarations",children:"4.3. User Type Declarations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nUserTypeDeclaration = StringTypeDeclaration\n                    | IntegerTypeDeclaration\n                    | FloatTypeDeclaration\n                    | BooleanTypeDeclaration\n                    | EnumTypeDeclaration\n                    | ObjectTypeDeclaration\n                    | ArrayTypeDeclaration\n                    ;\n@endebnf\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"431-string-user-type-declaration",children:["4.3.1. ",(0,r.jsx)(n.code,{children:"string"})," User Type Declaration"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nStringTypeDeclaration = "def", "string", Identifier, ":", Descriptor\n                      , {",", StringModifier}\n                      ;\n\nStringModifier = ("length" | "min_length" | "max_length"), "(", IntegerLiteral, ")"\n               | "regex", "(", RegularExpressionLiteral, ")"\n               ;\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length"}),": fixed number of characters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_length"}),": minimum number of characters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max_length"}),": maximum number of characters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"regex"}),": regular expression"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def string messageId: "message id string", length(28)\n\ndef string userId: "user ID",\n    min_length(4), max_length(30),  // allowed length is 4-30\n    regex(/[a-zA-Z0-9]+/)           // only alphabets and numbers allowed\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"432-int-user-type-declarations",children:["4.3.2. ",(0,r.jsx)(n.code,{children:"int"})," User Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nIntegerTypeDeclaration = "def", "int", Identifier, ":", Descriptor\n                       , {",", IntegerModifier}\n                       ;\nIntegerModifier = ("min_value" | "max_value"), "(", IntegerLiteral, ")";\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_value"}),": minimum value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max_value"}),": maximum value"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"433-float-user-type-declarations",children:["4.3.3. ",(0,r.jsx)(n.code,{children:"float"})," User Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nFloatTypeDeclaration = "def", "float", Identifier, ":", Descriptor\n                     , {",", FloatModifier}\n                     ;\nFloatModifier = ("min_value" | "max_value"), "(", FloatLiteral, ")";\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_value"}),": minimum value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max_value"}),": maximum value"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"434-bool-user-type-declarations",children:["4.3.4. ",(0,r.jsx)(n.code,{children:"bool"})," User Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nBooleanTypeDeclaration = "def", "bool", Identifier, ":", Descriptor;\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"435-enum-type-declarations",children:["4.3.5. ",(0,r.jsx)(n.code,{children:"enum"})," Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nEnumTypeDeclaration = "def", "enum", Identifier, ":", Descriptor\n                    , "{"\n                    , EnumMemberDefinition\n                    , {",", EnumMemberDefinition}\n                    , "}"\n                    ;\n\nEnumMemberDefinition = Literal, [":", Descriptor];\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"436-object-user-type-declarations",children:["4.3.6. ",(0,r.jsx)(n.code,{children:"object"})," User Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nObjectTypeDeclaration = "def", "object", Identifier, ":", Descriptor\n                      , "{"\n                      , {MemberAnnotation | PresenceSymbol, MemberDefinition}-\n                      , "}"\n                      ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nMemberAnnotation = "@spread", "(", Identifier (* ObjectType *), ")";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nPresenceSymbol = "+" (* mandatory *) | "-" (* optional *);\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nMemberDefinition = SimpleMemberDefinition\n                 | ObjectMemberDefinition\n                 | ArrayMemberDefinition\n                 | GroupDefinition\n                 | SelectDefinition\n                 ;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nSimpleMemberDefinition = TypeName, MemberName, ":", Descriptor, {",", SimpleMemberModifier};\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nTypeName = PrimitiveType | UserType;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nUserType = Identifier;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nMemberName = '\"', StringLiteral, '\"' | Variable;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nVariable = "$", Identifier;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nSimpleMemberModifier = ("default" | "value" | "min_value" | "max_value") , "(", Literal, ")"\n    | ("length" | "byte_length" | "min_length" | "max_length" | "min_byte_length" | "max_byte_length"), "(", IntegerLiteral, ")"\n    | "regex", "(", RegularExpressionLiteral, ")"\n    | ("min_extend" | "max_extend"), "(", IntegerLiteral, ")"\n    | "variable_type", "(", UserName, ")"\n    ;\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"}),": default value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"}),": fixed value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_value"}),", ",(0,r.jsx)(n.code,{children:"max_value"}),": minimum, maximum value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length"}),": fixed length"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"byte_length"}),": fixed length in bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_byte_length"}),", ",(0,r.jsx)(n.code,{children:"max_byte_length"}),": minimum, maximum length in bytes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"regex"}),": regular expression condition"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_extend"}),", ",(0,r.jsx)(n.code,{children:"max_extend"}),": minimum, maximum frequency of objects that can appear in the extension part"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"variable_type"}),': explicitly specifies the type of the extension variable. Default is "string"']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nObjectMemberDefinition = "object", MemberName, ":", Descriptor\n                       , {",", ObjectMemberModifier}\n                       , "{"\n                       , ("..." | {PresenceSysmbol, MemberDefinition}-)\n                       , "}"\n                       ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nObjectMemberModifier = ("default" | "value"), "(", "{", ? object value expression ? , "}", ")"\n                     | "emptiable", "(", BooleanLiteral, ")"\n                     | ("min_extend" | "max_extend"), "(", IntegerLiteral, ")"\n                     | "variable_type", "(", UserName, ")"\n                     ;\n\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"}),": default value\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Example: default({"age": 16, "name": "James"})'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"}),": fixed value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"emptiable"}),": allows empty value (",(0,r.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_extend"}),", ",(0,r.jsx)(n.code,{children:"max_extend"}),": minimum, maximum frequency of objects that can appear in the extension part"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"variable_type"}),': explicitly specifies the type of the extension variable. Default is "string"']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nArrayMemberDefinition = ObjectArrayMemberDefinition | TypedArrayMemberDefinition;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nObjectArrayMemberDefinition = "array", "(", "object", ")", MemberName, ":", Descriptor\n                            , {",", ArrayMemberModifier}\n                            , "{"\n                            , ("..." | {PresenceSysmbol, MemberDefinition}-)\n                            , "}"\n                            ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nTypedArrayMemberDefinition = "array", "(", TypeName, ")", MemberName, ":", Descriptor\n                           , {",", TypedArrayMemberModifier}\n                           ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nArrayMemberModifier = ("count" | "min_count" | "max_count"), "(", IntegerLiteral, ")"\n                    | "emptiable", "(", BooleanLiteral, ")"\n                    | ("min_extend" | "max_extend"), "(", IntegerLiteral, ")"\n                    | "variable_type", "(", UserName, ")"\n                    ;\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"}),": fixed number of array items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_count"}),", ",(0,r.jsx)(n.code,{children:"max_count"}),": minimum, maximum number of items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"emptiable"}),": allows empty array (",(0,r.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_extend"}),", ",(0,r.jsx)(n.code,{children:"max_extend"}),": minimum, maximum frequency of objects that can appear in the extension part"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"variable_type"}),': explicitly specifies the type of the extension variable. Default is "string"']}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nTypedArrayMemberModifier = ArrayMemberModifier\n                         | ("default" | "value"), "(", "[", Literal, {",", Literal}, "]", ")"\n                         | "oneof", "(", Literal, {",", Literal}, ")"\n                         ;\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"}),": default value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"}),": fixed value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"oneof"}),": list of candidates that can appear as values in the array (used instead of enum definition)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nGroupDefinition = "group", "{", {PresenceSysmbol, MemberDefinition}-, "}";\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nSelectDefinition = "select", "(", IntegerLiteral, ["..", IntegerLiteral] , ")"\n                 , "{", {"^", MemberDefinition}-, "}"\n                 ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'select(1)  // Only one item can be included. Must have more than one member.\n{\n    ^ string "a": "A"\n    ^ string "b": "B"\n}\n\nselect(1..3)  // 1 to 3 items can be included. Must have more than three members.\n{\n    ^ string "a": "A"\n    ^ string "b": "B"\n    ^ string "c": "C"\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"437-array-user-type-declarations",children:["4.3.7. ",(0,r.jsx)(n.code,{children:"array"})," User Type Declarations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:"@startebnf\nArrayTypeDeclaration = ObjectArrayTypeDeclaration | TypedArrayTypeDeclaration;\n@endebnf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nObjectArrayTypeDeclaration = "def", "array", "(", "object", ")", Identifier, ":", Descriptor\n                           , {",", ArrayModifier}\n                           , "{"\n                           , ("..." | {PresenceSysmbol, MemberDefinition}-)\n                           , "}"\n                           ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nTypedArrayTypeDeclaration = "def", "array", "(", TypeName, ")", Identifier, ":", Descriptor\n                          , {",", TypedArrayModifier}\n                          ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nArrayModifier = ("count" | "min_count" | "max_count"), "(", IntegerLiteral, ")";\n@endebnf\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"count"}),": fixed number of array items"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min_count"}),", ",(0,r.jsx)(n.code,{children:"max_count"}),": minimum, maximum number of items"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plantuml",children:'@startebnf\nTypedArrayModifier = ArrayModifier\n                   | "oneof", "(", Literal, {",", Literal}, ")"\n                   ;\n@endebnf\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:'def array(object) UserInfoList: "user information array", min_count(1)\n{\n    + string "name"      : "name"\n    + string "birth_date": "date of birth"\n    - string "ci"        : "CI"\n}\n\ndef array(string) SelectedColors: "selected colors", count(2), oneof("RED", "GREEN", "BLUE", "YELLOW")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);