"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1246],{52868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>r});const l=JSON.parse('{"id":"concepts/wallet_lock_policy","title":"Wallet Lock","description":"- Subject: Wallet Lock","source":"@site/versioned_docs/version-1.000/concepts/wallet_lock_policy.md","sourceDirName":"concepts","slug":"/concepts/wallet_lock_policy","permalink":"/did-doc-architecture/docs/concepts/wallet_lock_policy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.000/concepts/wallet_lock_policy.md","tags":[],"version":"1.000","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Wallet","permalink":"/did-doc-architecture/docs/concepts/wallet_ko"},"next":{"title":"\uc6d4\ub7ab \uc7a0\uae08","permalink":"/did-doc-architecture/docs/concepts/wallet_lock_policy_ko"}}');var a=n(74848),s=n(28453);const c={},i="Wallet Lock",d={},r=[{value:"1. Wallet Lock (PIN)",id:"1-wallet-lock-pin",level:3},{value:"Example",id:"example",level:3},{value:"2. Wallet Unlock (PIN)",id:"2-wallet-unlock-pin",level:3},{value:"Example",id:"example-1",level:3},{value:"3. Wallet PIN Change (TO-DO)",id:"3-wallet-pin-change-to-do",level:3}];function o(e){const t={br:"br",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"wallet-lock",children:"Wallet Lock"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Subject: Wallet Lock"}),"\n",(0,a.jsx)(t.li,{children:"Author: OpenSource Development Team"}),"\n",(0,a.jsx)(t.li,{children:"Date: 2024-10-18"}),"\n",(0,a.jsx)(t.li,{children:"Version: v1.0.0"}),"\n"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Version"}),(0,a.jsx)(t.th,{children:"Date"}),(0,a.jsx)(t.th,{children:"Changes"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"v1.0.0"}),(0,a.jsx)(t.td,{children:"2024-10-18"}),(0,a.jsx)(t.td,{children:"Initial version"})]})})]}),"\n",(0,a.jsx)(t.br,{}),"\n",(0,a.jsxs)(t.p,{children:["It generates, changes, and retrieves a cek (content encryption key) based on the passcode received from the Certified App (CApp).\n",(0,a.jsx)(t.br,{}),"\nThe cek is managed by the service wallet and is used during wallet lock/unlock.\nThe passcode input screen is implemented in the CApp, and the passcode is matched when registered or changed."]}),"\n",(0,a.jsx)(t.p,{children:"The locked and non-locked wallets operate according to user authentication as follows."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Image Description",src:n(73653).A+"",width:"1149",height:"287"})}),"\n",(0,a.jsx)(t.p,{children:"The technical logic for registering and authenticating a user's passcode to set up a locked wallet is explained below."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Terms\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"cek = content encryption key"}),"\n",(0,a.jsx)(t.li,{children:"kek = key encryption key"}),"\n",(0,a.jsx)(t.li,{children:"pbkdf = password-based key derivation function"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"1-wallet-lock-pin",children:"1. Wallet Lock (PIN)"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Image Description",src:n(70371).A+"",width:"1036",height:"170"})}),"\n",(0,a.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-code",children:'let sacObject = SecAccessControlCreateWithFlags(kCFAllocatorDefault\n                                                , kSecAttrAccessibleWhenUnlockedThisDeviceOnly\n                                                , []\n                                                , &errorRef)\n        \nlet queryForDelete: [CFString: Any] = [kSecClass: kSecClassGenericPassword, kSecAttrService: "KEY_PIN_CHAIN_DATA"]\n        \nvar status = SecItemDelete(queryForDelete as CFDictionary)\nWalletLogger.shared.debug("item delete status: \\(status)")\n\nvar cek: NSMutableData\nif self.seedKey == nil {\n    cek = NSMutableData(length: 32)!\n    _ = SecRandomCopyBytes(kSecRandomDefault, 32, cek.mutableBytes)\n}  else {\n    cek = NSMutableData(data: self.seedKey!)\n}\n\nlet salt = try MultibaseUtils.decode(encoded: "f6c646576656c6f7065726c3139383540676d61696c2e636f6d")\n \nlet kek = try CryptoUtils.pbkdf2(password: passcode.data(using: .utf8)!, salt: salt, iterations: 2048, derivedKeyLength: 32)\n\nWalletLogger.shared.debug("======[H] kek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: kek))")\n        \nlet iv = try MultibaseUtils.decode(encoded: "z75M7MfQsC4p2rTxeKxYh2M")\n        \nlet encCek = try CryptoUtils.encrypt(plain: cek as Data, info: CipherInfo(cipherType: SymmetricCipherType.aes256CBC, padding: SymmetricPaddingType.pkcs5), key: kek, iv: iv)\n\nWalletLogger.shared.debug("======[H] encCek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: encCek))")\n        \nlet finalEncCek = try SecureEncryptor.encrypt(plainData: encCek as Data)\n'})}),"\n",(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.h3,{id:"2-wallet-unlock-pin",children:"2. Wallet Unlock (PIN)"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"Image Description",src:n(5542).A+"",width:"1036",height:"165"}),"\n",(0,a.jsx)(t.br,{})]}),"\n",(0,a.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-swift",children:'let finalEncCek = try MultibaseUtils.decode(encoded: CoreDataManager.shared.selectUser()!.finalEncKey)\n\nWalletLogger.shared.debug("======[H] finalEncCek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: finalEncCek))")\n\nlet encCek = try SecureEncryptor.decrypt(cipherData: finalEncCek)\nWalletLogger.shared.debug("======[H] encCek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: encCek))")\n\nlet salt = try MultibaseUtils.decode(encoded: "f6c646576656c6f7065726c3139383540676d61696c2e636f6d")\nlet kek = try CryptoUtils.pbkdf2(password: passcode.data(using: .utf8)!, salt: salt, iterations: 2048, derivedKeyLength: 32)\n\nWalletLogger.shared.debug("======[H] kek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: kek))")\n\nlet iv = try MultibaseUtils.decode(encoded: "z75M7MfQsC4p2rTxeKxYh2M")\nlet decCek = try CryptoUtils.decrypt(cipher: encCek, info: CipherInfo(cipherType: SymmetricCipherType.aes256CBC, padding: SymmetricPaddingType.pkcs5), key: kek, iv: iv)\n\nWalletLogger.shared.debug("======[H] decCek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: decCek))")\n\n\nvar dataTypeRef: CFTypeRef?\n\nlet query: [CFString: Any] = [\n    kSecClass: kSecClassGenericPassword,\n    kSecAttrService: "KEY_PIN_CHAIN_DATA",\n    kSecReturnData: true\n]\n\nlet status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)\nWalletLogger.shared.debug("item matching status : \\(status)")\n\n\nlet cek = dataTypeRef as! Data\nWalletLogger.shared.debug("======[H] load cek: \\(MultibaseUtils.encode(type: MultibaseType.base16, data: cek))")\n\nif cek as Data == decCek {\n    return cek as Data\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"3-wallet-pin-change-to-do",children:"3. Wallet PIN Change (TO-DO)"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Image Description",src:n(29029).A+"",width:"1036",height:"171"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},70371:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/wallet_lock_policy_pin_lock-47063aff5e139378a4b9dfd8cbffe0e9.svg"},5542:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/wallet_lock_policy_pin_unlock-c509275bd007f4457d75d972019d53e2.svg"},29029:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/wallet_lock_policy_pin_update-ad5d118b82722b0fbfdc683dd320db05.svg"},73653:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/wallet_type_access_sdk-d4d9b62427e92295007a48c549d04a2d.svg"},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var l=n(96540);const a={},s=l.createContext(a);function c(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);