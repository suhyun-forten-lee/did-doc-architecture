@startuml issue_server_token_ko

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 설정
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID 기술 규격
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== 제목 ===
title
	<size:25>서버토큰 생성</size>
end title

'=== 옵션 ===
autonumber "<b>(#)</b>"

'=== Panticipants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

box 모바일 #OldLace
    participant "**월렛**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**인가앱**" as CA <<App>> #WhiteSmoke    
end box

box 인가앱 사업자 #AliceBlue
    participant "**CAS**" as CAS <<WAS>> #WhiteSmoke
end box

box TAS 사업자 #AliceBlue
    participant "**TAS**" as TAS <<WAS>> #WhiteSmoke
end box

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 상수
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!$refdoc = "별도 문서 참조"
!$doc = "데이터명세 문서 참조"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' 내용
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

rnote across #white
    암복호화를 위해 CA와 TAS가 키를 교환 하는 과정은 생략함
end note

== 서명된 월렛 정보 요청  ==
CA -> WALLET ++ : 서명된 Wallet 정보 요청 {walletToken}
    WALLET -> WALLET: walletToken 검증
    WALLET -> WALLET: nonce 생성
    WALLET -> WALLET: Wallet 정보 서명\
                \n* (SignedWalletInfo)walletInfo= {\
                \n      walletId,\
                \n      did,\
                \n      nonce,\
                \n      proof\
                \n      }
return {walletInfo}

|||
== 서명된 앱 정보 요청  ==
rnote across #white
    인가앱은 로그인 또는 유사한 과정을 통해 인가앱 서버와 이미 세션을 맺고 있어야 한다.
    그러나 이 과정의 구체적인 내용은 본 규격에서 다루지 않는다.
end note

CA -> CAS ++ : 서명된 앱 정보 요청
rnote right of CA #LightGray        
    **[API_REQ : 서명된 앱 정보 요청]**
    query:
        appId
end note

    CAS -> CAS : nonce 생성
    CAS -> CAS : 앱 정보 서명\
            \n* (AttestedAppInfo)caAppInfo= {\
            \n      appId,\
            \n      provider,\
            \n      nonce,\
            \n      proof\
            \n      }
return 서명된 앱 정보 응답{caAppInfo}
rnote right of CA #LightGray        
    **[API_REQ : 서명된 앱 정보 응답]**
    body:
        attestedAppInfo
end note

|||
== 서버토큰 데이터 생성 요청  ==
CA -> CA: 서버토큰시드 생성\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "CreateDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

    CA -> TAS++ : 서버토큰 요청
    rnote right of CA #LightGray        
        **[API_REQ : 서버토큰 요청]**
        body:
            messageId,
            txId,
            seed
    end note

    TAS -> TAS: 서명 검증\
            \n* 월렛서명 검증\
            \n* 인증앱 사업자 서명 검증

    TAS -> TAS: seed에서 정보 추출\
            \n* appId = 인가앱 식별자\
            \n* walletId = 월렛 식별자\
            \n* walletDid = 월렛 DID\
            \n* walletProviderDid = 월렛 사업자 DID

    TAS -> TAS: 등록된 월렛정보와 일치여부 확인

    TAS -> TAS: 서버토큰 생성 및 저장\
            \n* (ServerTokenData)std 생성\
            \n* serverToken = sha256(std)

    TAS -> TAS: 응답정보 암호화\
            \n* iv = IV 생성\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)

return 서버토큰 응답
rnote right of CA #LightGray        
    **[API_REQ : 서버토큰 응답]**
    body:
        txId,
        iv,
        encStd
end note

|||
== 서버토큰 생성  ==
CA -> CA: encStd 복호화\
    \n tmp = debase(encStd)\
    \n* std = dec(tmp, sesKey, iv)

CA -> CA: 서버토큰 계산\
    \n serverToken = sha256(std)

|||
|||
@enduml

