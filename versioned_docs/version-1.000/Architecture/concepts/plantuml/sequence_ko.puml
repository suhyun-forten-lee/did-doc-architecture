@startuml seq_create_wallet_ko
title
	<size:25>월렛 등록</size>
end title

autonumber "<b>(#)</b>"

box 모바일 #OldLace
    participant "**인가앱**" as ca <<App>>
    participant "**월렛**" as wal <<Wallet>>
end box
participant "**월렛 사업자**" as wp <<Server>>
participant "**TAS**" as tas <<Server>>
participant "**신뢰저장소**" as bc <<Blockchain>>

activate ca

ca -> wal ++: 월렛 생성 요청

== (A1) 월렛 생성 ==

    wal -> wal: 월렛 초기화

== (A2) 월렛 DID Document 생성 ==

    wal -> wal: 월렛 키(Device Key) 생성
    wal -> wal: (DidDoc)didDoc \
            \n  = DID Document 생성
    wal -> wal: (OwnerDidDoc)ownerDidDoc\
            \n  = 개별키서명(didDoc)

== (A3) 월렛 식별자 생성 및 월렛 DID Document 서명 ==

    wal -> wp ++: DID Document 서명 요청\n{ownerDidDoc}
        wp -> wp: walletId = 월렛 식별자 생성
        wp -> wp: (AttestedDidDoc)attDidDoc = {\
            \n   walletId,\
            \n   onwerDidDoc,\
            \n   provider = 월렛 사업자 정보,\
            \n   nonce = nonce 생성\
            \n }
        wp -> wp: 월렛 사업자 서명\
            \n* signAssert(attDidDoc)
        wp -> wp: 매핑 정보 DB 저장\
            \n* walletId (월렛 식별자)\
            \n* walletDid (월렛 DID)
    return {attDidDoc}

== (A4) TAS에 월렛 등록 ==

    wal -> tas ++: Request Register Wallet\n{attDidDoc}
        tas -> tas: 서명 검증\
            \n* 월렛 사업자 서명 검증\
            \n* 개별키 서명 검증
        
        tas -> tas: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS 정보,\
            \n   nonce = nonce 생성\
            \n }

        tas -> tas: Controller 서명\
            \n* signInvoke(invDidDoc)

        tas -> bc ++: DID 등록 요청\n{invDidDoc}
            bc -> bc: Controller\n서명 검증
            bc -> bc: 등록
        return OK

        tas -> tas: 매핑 정보 DB 저장\
            \n* walletId (월렛 식별자)\
            \n* walletDid (월렛 DID)\
            \n* walletProviderDid (월렛 사업자 DID)
    return OK
return OK
@enduml

--------------------------------------------------------------------------------

@startuml seq_register_user_ko
title
	<size:25>사용자 등록</size>
end title

autonumber "<b>(#)</b>"

actor "**사용자**" as user
box 모바일 #OldLace
    participant "**인가앱**" as ca <<App>>
    participant "**월렛**" as wal <<Wallet>>
end box
participant "**TAS**" as tas <<Server>>
participant "**신뢰저장소**" as bc <<Blockchain>>

rnote over ca, bc
    (선택적 수행)
    Request Register User 이전에 KYC 수행하여 TAS가 개인식별번호 획득
    인가앱이 KYC 수행하여 TAS에 개인식별번호를 넘겨줄 수도 있음
    
    * pii = 개인식별번호
end rnote

== (B1) Propose Register User ==

activate ca

ca -> tas ++: Propose Register User
    tas -> tas: 거래준비
    note right: pii가 식별된 경우 발급 가능여부 확인
return OK

== (B2) Request ECDH ==

ca -> ca: ECDH 데이터 준비 및 서명\
        \n* (ReqEcdh)reqEcdh\
        \n   = ECDH 요청 생성

opt KeyAgreement 서명 ON
    ca -> wal ++: KeyAgreement 서명 요청\n{reqEcdh}
        wal -> wal: signKeyAgree(reqEcdh)
        note right
            실제 호출 시
            * 인가앱은 원문의 해시와 keyId를 전달
            * 월렛은 서명값만 응답
        end note
    return {reqEcdh}
end

ca -> tas ++: Request ECDH\n{reqEcdh}
    opt KeyAgreement 서명 ON
        tas -> tas: reqEcdh.proof 서명 검증
    end
    tas -> tas: ECDH 수행\
            \n* sesKey = 세션키\
            \n* (AccEcdh)accEcdh\
            \n   = ECDH 수락 생성

    opt KeyAgreement 서명  ON
        tas -> tas: signKeyAgree(accEcdh)
    end

return {accEcdh}
opt KeyAgreement 서명  ON
    ca -> ca: accEcdh.proof 서명 검증
end
ca -> ca: ECDH 수행\n* sesKey = 세션키

== (B3) Request Create Token ==

hnote over ca, wal #LimeGreen
    * purpose = "CreateDid"
    * (SignedWalletInfo)walletInfo = 월렛정보 생성
    * walletToken = 월렛토큰
end hnote

ca -> ca: * (AttestedAppInfo)caAppInfo\
        \n   = 서명된 앱정보 생성

ca -> ca: 서버토큰시드 생성\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "CreateDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

ca -> tas ++: Request Create Token\n{seed}
    tas -> tas: 서명 검증\
            \n* 월렛서명 검증\
            \n* 인증앱 사업자 서명 검증

    tas -> tas: seed에서 정보 추출\
            \n* appId = 인가앱 식별자\
            \n* walletId = 월렛 식별자\
            \n* walletDid = 월렛 DID\
            \n* walletProviderDid = 월렛 사업자 DID

    tas -> tas: 등록된 월렛정보와 일치여부 확인

    tas -> tas: 서버토큰 생성 및 저장\
            \n* (ServerTokenData)std 생성\
            \n* serverToken = sha256(std)

    tas -> tas: 응답정보 암호화\
            \n* iv = IV 생성\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

ca -> ca: 복호화(생략) 및 데이터 준비\
        \n* serverToken 계산

== (B4) Request Register User ==

ca -> wal ++: 사용자 DID 키 생성 요청\n{walletToken}
    wal -> wal: walletToken 검증

    user -[#Blue]\ wal: PIN 입력
    wal -> wal: PIN 키 생성

    opt 사용자가 원할 경우
        user -[#Blue]\ wal: 지문/안면 인식
        wal -> wal: BIO 키 생성
    end

    wal -> wal: 키교환용 키 생성
return OK

ca -> wal ++: 사용자 등록 요청\n{walletToken, serverToken}
    wal -> wal: walletToken 검증

    wal -> wal: (DidDoc)didDoc \
            \n  = DID Document 생성
    wal -> wal: (OwnerDidDoc)ownerDidDoc\
            \n  = 개별키서명(didDoc)
    wal -> wal: (SignedDidDoc)sgdDidDoc = {\
            \n   onwerDidDoc,\
            \n   wallet = 월렛 정보,\
            \n   nonce = nonce 생성\
            \n }
    wal -> wal: 월렛 서명\
            \n* signAssert(sgdDidDoc)

    wal -> tas ++: Request Register User\n{serverToken, sgdDidDoc}
        tas -> tas: serverToken 검증

        tas -> tas: 서명 검증\
            \n* 월렛 서명 검증\
            \n* 개별키 서명 검증
        
        tas -> tas: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS 정보,\
            \n   nonce = nonce 생성\
            \n }

        tas -> tas: Controller 서명\
            \n* signInvoke(invDidDoc)

        tas -> bc ++: DID 등록 요청\n{invDidDoc}
            bc -> bc: Controller\n서명 검증
            bc -> bc: 등록
        return OK

        tas -> tas: 사용자 매핑정보 DB 저장\
                \n* pii (개인식별번호)\
                \n* holderDid (사용자 DID)\
                \n* walletId (월렛 식별자)\
                \n* appId (인가앱 식별자)
        return OK
return OK

== (B5) Confirm Register User ==

ca -> tas ++: Confirm Register User\n{serverToken}
    tas -> tas: serverToken 검증
    tas -> tas: 세션정보 삭제 및 거래종료
return OK
@enduml

--------------------------------------------------------------------------------

@startuml seq_user_init_ko
title
	<size:25>사용자에 의한 발급 개시</size>
end title

autonumber "<b>(#)</b>"

actor "**사용자**" as user
participant "**인가앱**" as ca <<App>>
participant "**목록 사업자**" as lp <<Server>>
participant "**TAS**" as tas <<Server>>

== (C) 개시 단계 ==

activate ca

user -[#Blue]\ ca: 발급 가능 목록 요청

ca -> lp ++: VC Plan 검색 및 조회\n{검색조건}
    lp -> lp: vcPlanList = VC Plan 조회
return {vcPlanList}

ca -> ca: VC Plan 목록 표출
user -[#Blue]\ ca: VC Plan 선택
opt 복수 이슈어 제공시
    user -[#Blue]\ ca: 이슈어 선택
end

ca -> ca: 발급 요청 데이터 준비\
        \n* vcPlanId = 선택된 VC Plan id\
        \n* issuer = 선택된 이슈어 DID

== (D) 발급 단계 ==

ca -> tas ++: D1. 발급 시작 요청\n{vcPlanId[, issuer]}
note over ca, tas: 이하 생략
@enduml

--------------------------------------------------------------------------------

@startuml seq_issuer_init_ko
title
	<size:25>이슈어에 의한 발급 개시</size>
end title

autonumber "<b>(#)</b>"

'actor "**사용자**" as user
participant "**인가앱**" as ca <<App>>
participant "**TAS**" as tas <<Server>>
participant "**발급 사업자**" as vf <<Server>>
participant "**알림 사업자**" as noti <<Server>>

rnote over vf
    **[사전 확보 정보 (사용자별)]**
    -- 필수 --
    * userId = 이슈어측 사용자 계정
    * userEmail = 사용자 이메일 주소
    -- 선택 --
    * holderDid = 사용자 DID
    * userMobile = 사용자 휴대폰번호
end rnote

== (C) 개시 단계 ==

activate vf
vf -> vf: 발급 Offer 생성\
        \n* offerId = Offer 식별자\
        \n* vcPlanId = VC Plan id\
        \n* issuer = 발급 사업자 DID\
        \n* validUntil = 유효기한 설정
vf -> vf: Offer vs 사용자 매핑\
        \n* offerId ~ userId
vf -> vf: Offer Payload 생성\
        \n* (IssueOfferPayload)payload\
        \n = {offerId, vcPlanId, issuer, validUntil}
vf -> vf: Offer QR 코드 생성\
        \n* qr = GenQr(payload)
note right: QR 코드 형식은 out of scope

vf -> vf: 이메일 메시지 생성\
        \n* emailMsg = GenEmailMsg(qr)
note right: 이메일 메시지 형식은 out of scope

vf -> noti ++: 이메일 발송 요청\n{userEmail, emailMsg}
    noti -[#Blue]-\ : 이메일 발송 to userEmail
return 응답

opt holderDid 확보 시
    vf -> vf: PUSH 메시지 생성\
            \n* pushMsg = GenPushMsg(payload)
    note right: PUSH 메시지 형식은 out of scope

    vf -> noti ++: PUSH 발송 요청\n{holderDid, pushMsg}
        noti -[#Blue]-\ : PUSH 발송 to holderDid
    return
end
deactivate vf

|||
...a few moments later...
|||

alt 이메일 수신 시
    ca \-[#Blue]-? ++: QR 코드 스캔
    ca -> ca: QR 메시지 파싱\n* payload = payload 읽기
else PUSH 수신 시
    ca \-[#Blue]-? : PUSH 메시지 수신
    ca -> ca: PUSH 메시지 파싱\n* payload = payload 읽기
end

== (D) 발급 단계 ==

ca -> tas ++: D1. 발급 시작 요청\
        \n{\
        \n    vcPlanId = payload.vcPlanId,\
        \n    issuer = payload.issuer,\
        \n    **offerId** = payload.offerId\
        \n}
note over ca, tas: 이하 생략
@enduml

--------------------------------------------------------------------------------

@startuml seq_issue_vc_ko
title
	<size:25>VC 발급</size>
end title

autonumber "<b>(#)</b>"

actor "**사용자**" as user
box 모바일 #OldLace
    participant "**인가앱**" as ca <<App>>
    participant "**월렛**" as wal <<Wallet>>
end box
participant "**TAS**" as tas <<Server>>
participant "**발급 사업자**" as vf <<Server>>

hnote over ca, vf #LimeGreen
    개시 단계 수행으로 아래 정보 획득
    * vcPlanId, (optional)issuer, (optional)offerId
end hnote

rnote over ca, vf
    (선택적 수행)
    Request Issue Profile 이전에 KYC 수행하여 TAS가 개인식별번호 획득
    인가앱이 KYC 수행하여 TAS에 개인식별번호를 넘겨줄 수도 있음
    
    * pii = 개인식별번호
end rnote

== 1. Propose Issue VC ==

activate ca

ca -> tas ++: Propose Issue VC\n{vcPlanId[, issuer, offerId]}
    tas -> tas: * VC plan 유효성 확인\n* 발급이슈어 식별
    note right
        발급이슈어 식별은 TAS DB 또는
        내부 설정에 저장된 정보를 확인
    end note
    tas -> vf ++: Inspect Propose\n{vcPlanId[, issuer, offerId]}
        vf -> vf: VC 발급 가능여부 확인
        vf -> vf: refId = 참조번호 생성
    return {refId}
return {refId}

== 2. Request ECDH ==

ca -> ca: ECDH 데이터 준비 및 서명\
        \n* (ReqEcdh)reqEcdh\
        \n   = ECDH 요청 생성

opt KeyAgreement 서명 ON
    ca -> wal ++: KeyAgreement 서명 요청\n{reqEcdh}
        wal -> wal: signKeyAgree(reqEcdh)
        note right
            실제 호출 시
            * 인가앱은 원문의 해시와 keyId를 전달
            * 월렛은 서명값만 응답
        end note
    return {reqEcdh}
end

ca -> tas ++: Request ECDH\n{reqEcdh}
    opt KeyAgreement 서명 ON
        tas -> tas: reqEcdh.proof 서명 검증
    end
    tas -> tas: ECDH 수행\
            \n* sesKey = 세션키\
            \n* (AccEcdh)accEcdh\
            \n   = ECDH 수락 생성

    opt KeyAgreement 서명  ON
        tas -> tas: signKeyAgree(accEcdh)
    end

return {accEcdh}
opt KeyAgreement 서명 ON
    ca -> ca: accEcdh.proof 서명 검증
end
ca -> ca: ECDH 수행\n* sesKey = 세션키

== 3. Request Create Token ==

hnote over ca, wal #LimeGreen
    * purpose = "IssueVc"
    * (SignedWalletInfo)walletInfo = 월렛정보 생성
    * walletToken = 월렛토큰
end hnote

ca -> ca: * (AttestedAppInfo)caAppInfo\
        \n   = 서명된 앱정보 생성
ca -> ca: 서버토큰시드 생성\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "IssueVc",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

ca -> tas ++: Request Create Token\n{seed}
    tas -> tas: 서명 검증\
            \n* 월렛서명 검증\
            \n* 인증앱 사업자 서명 검증
    tas -> tas: 서버토큰 생성 및 저장\
            \n* (ServerTokenData)std 생성\
            \n* serverToken = sha256(std)
    tas -> tas: 응답정보 암호화\
            \n* iv = IV 생성\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

ca -> ca: 복호화(생략) 및 데이터 준비\
        \n* serverToken 계산

== 4. Request Issue Profile ==

ca -> tas ++: Request Issue Profile\n{serverToken}
    tas -> tas: 권한확인 및 holder 식별\
            \n* serverToken 검증\
            \n* holderDid = Holder DID
    tas -> vf ++: Generate Profile\n{holderDid[, pii]}
        vf -> vf: Profile 관련 데이터 준비\
                \n* issuerNonce = 발급용 nonce 생성\
                \n* (ReqE2e)reqE2e = E2E 요청정보 생성\
                \n* 기타 데이터는 생략
        vf -> vf: (IssueProfile)profile = Profile 생성
    return {profile}
    tas -> tas: * authNonce = DID Auth용 nonce 생성
return {authNonce, profile}

== 5. Request Issue VC ==

ca -> wal ++: VC 발급 요청\n{walletToken, serverToken,\
        \n   refId, authNonce, profile}
    wal -> wal: walletToken 검증

    wal -> wal: profile.proof 서명 검증
    wal -> wal: DID Auth 데이터 준비\
        \n* (DidAuth)didAuth = {\
        \n     did = Holder DID,\
        \n     authNonce\
        \n  }
    user -[#Blue]\ wal: 사용자 인증
    wal -> wal: signAuth(didAuth)

    wal -> wal: E2E용 ECDH 수행\
            \n* _, pubKeyE2E = ECC 키쌍 생성\
            \n* e2eKey = profile 내 E2E 데이터로\
            \n  암호화키 생성\
            \n* iv = IV 생성\
            \n* (AccE2e)accE2e = {pubKeyE2E, iv}\
            \n* signKeyAgree(accE2e)
    wal -> wal: 발급 요청정보 생성 및 암호화\
            \n* (ReqVc)reqVc 생성\
            \n* encReqVc = enc(data, e2eKey, iv)

    wal -> tas ++: Request Issue VC\n{serverToken, didAuth, accE2e, encReqVc}
        tas -> tas: serverToken 검증
        tas -> tas: DID Auth 검증\
                \n* didAuth.proof 검증\
                \n* authNonce 일치여부 확인
        tas -> vf ++: Issue VC\n{accE2e, encReqVc}
            vf -> vf: E2E ECDH 수행\
                    \n* accE2e.proof 검증\
                    \n* e2eKey = 암호화키 생성\
                    \n* iv = accE2e.iv
            vf -> vf: encReqVc 복호화\
                    \n* tmp = debase(encReqVc)\
                    \n* reqVc = dec(tmp, e2eKey, iv)
            vf -> vf: IssueProfile 대비 reqVc 검증\
                    \n* refId 일치여부 확인\
                    \n* profile.id 일치여부 확인\
                    \n* profile.issuerNonce 일치여부 확인
            vf -> vf: vc = **VC 발급 or 재발급**
            vf -> vf: vc 암호화\
                    \n* iv = IV 생성\
                    \n* tmp = enc(vc, e2eKey, iv)\
                    \n* encVc = multibase(tmp)
        return {encVc, iv}
    return {encVc, iv}

    wal -> wal: encVc 복호화\
            \n* tmp = debase(encVc)\
            \n* vc = dec(tmp, e2eKey, iv)
    wal -> wal: 이슈어 서명 검증 및 저장
    wal -> wal: vcId = VC id 추출
return {vcId}

== 6. Confirm Issue VC ==

ca -> tas ++: Confirm Issue VC\n{vcId}
    tas -> vf ++: Complete VC\n{vcId}
        vf -> vf: vcId 확인 및 완료 처리
    return OK
return OK
@enduml

--------------------------------------------------------------------------------

@startuml seq_vp_offer1_ko
title
<size:25>[예시 1] 제출 Offer - Dynamic QR, Direct 모드</size>
end title

autonumber "<b>(#)</b>"

participant "**인가앱**" as ca <<App>>
box 응대장치(민원창구) #Azure
    participant "**디스플레이**" as dp <<Gadget>>
    participant "**직원 PC**" as pc <<PC>>
end box
participant "**검증 사업자**" as vf <<Server>>


rnote over pc
    **[사전 설정 정보]**
    * device = 응대장치 식별자
    * service = 서비스 식별자
    * mode = "Direct"
end rnote

== (B) Offer 단계 ==

activate pc
activate dp
pc -> vf ++: (Example) Request Offer\n{mode, device, service}
    vf -> vf: 제출 Offer 생성\
        \n* offerId = offer id 생성\
        \n* (VerifyOfferPayload)payload \
        \n    = Payload 생성
    note left
        mode = "Direct"인 경우
        payload에 endpoints 포함
    end note
return {payload}

pc -> pc: QR 코드 생성\n* qr = GenQr(payload)
pc -> dp: QR 코드 출력 {qr}

activate ca
ca <[#blue]-o dp: QR 코드 스캔
ca -> ca: * payload = Payload 추출\n* offerId = payload.offerId

== (C) 제출 단계 ==

ca -> vf ++: C1. Request Profile\n{offerId}
note over ca, vf: 이하 생략
@enduml

--------------------------------------------------------------------------------

@startuml seq_vp_offer2_ko
title
<size:25>[예시 2] 제출 Offer - Static QR + passcode, Direct 모드</size>
end title

autonumber "<b>(#)</b>"

actor "**사용자**" as user
participant "**인가앱**" as ca <<App>>
box 응대장치(민원창구) #Azure
    actor "**직원**" as staff
    participant "**Static QR**" as qr <<Paper>>
    participant "**직원 PC**" as pc <<PC>>
end box
participant "**검증 사업자**" as vf <<Server>>


rnote over pc
    **[사전 설정 정보]**
    * device = 응대장치 식별자
    * service = 서비스 식별자
    * mode = "Direct"
end rnote

== 준비 ==

staff -> qr: 인쇄된 QR 구비
activate qr

== (B) Offer 단계 ==

user -[#Blue]\ staff: 서비스 요청
staff -[#Blue]\ pc: 확인코드 요청
activate pc

pc -> vf ++: (Example) Request Offer\n{mode, device, service}
    vf -> vf: 제출 Offer 생성\
        \n* offerId = offer id 생성\
        \n* passcode = 확인코드 생성
return {offerId, passcode}

pc -> pc: passcode 출력

pc o-[#Blue]\ staff: passcode 확인
staff -[#Blue]\ user: "QR 스캔하시고, <passcode> 입력하세요." 안내

ca <[#blue]-o qr: QR 코드 스캔
activate ca
ca -> ca: * payload = Payload 추출\
        \n* device = payload.device\
        \n* service = payload.service
ca -> ca: 확인코드 입력창 표출

user -[#Blue]\ ca: <passcode> 입력
ca -> vf ++: (Example) Verify Passcode\n{device, service, passcode}
    vf -> vf: passcode 검증
    vf -> vf: offerId 조회
return {offerId}

== (C) 제출 단계 ==

ca -> vf ++: C1. Request Profile\n{offerId}
note over ca, vf: 이하 생략
@enduml

--------------------------------------------------------------------------------

@startuml seq_present_vp_direct_ko
title
	<size:25>VP 제출 - Direct 모드</size>
end title

autonumber "<b>(#)</b>"

actor "**사용자**" as user
box 모바일 #OldLace
    participant "**인가앱**" as ca <<App>>
    participant "**월렛**" as wal <<Wallet>>
end box
participant "**검증 사업자**" as vf <<Server>>

hnote over ca, vf #LimeGreen
    Offer 단계 수행으로 아래 정보 획득
    * device, service, (optional)offerId, (optional)passcode
end hnote

== 1. Request Profile ==

activate ca

ca -> vf ++: Request Profile\n{offerId}
    vf -> vf: offerId 유효성 확인
    vf -> vf: Profile 관련 데이터 준비\
            \n* verifierNonce = 제출용 nonce 생성\
            \n* (ReqE2e)reqE2e = E2E 요청정보 생성\
            \n* 기타 데이터는 생략
    vf -> vf: (VerifyProfile)profile = Profile 생성
return {profile}

hnote over ca, wal #LimeGreen
    월렛토큰 생성 {purpose = "PresentVp"}
    * walletToken = 월렛토큰
end hnote

ca -> wal ++: 제출가능 VC 목록 조회\n{walletToken, profile}
    wal -> wal: walletToken 유효성 확인
    wal -> wal: profile.proof 검증
    wal -> wal: filter 조건에 맞는 VC 검색\
            \n* (VpCandidate[ ])candidates\
            \n    = 후보 VC 목록 생성
return {candidates}

ca -> ca: 후보 VC 목록 출력

user -[#Blue]\ ca: VC 선택
ca -> ca: vcId = 선택된 VC id

user -[#Blue]\ ca: 제출 클레임 선택
ca -> ca: claimCodes = 제출 클레임 코드 목록

user -[#Blue]\ ca: 제출 동의

== 2. Request Verify ==

ca -> wal ++: VP 제출 요청\n{walletToken, vcId, claimCodes}
    wal -> wal: walletToken 유효성 확인
    wal -> wal: E2E용 ECDH 수행\
            \n* _, pubKeyE2E = ECC 키쌍 생성\
            \n* e2eKey = profile 내 E2E 데이터로\
            \n  암호화키 생성\
            \n* iv = IV 생성\
            \n* (AccE2e)accE2e = {pubKeyE2E, iv}\
            \n* signKeyAgree(accE2e)
    wal -> wal: VP 생성\
            \n* vp = GenVp(vcId, claimCodes, verifierNonce)

    user -[#Blue]\ wal: 사용자 인증\n(authType에 맞게)

    wal -> wal: VP 서명 및 암호화\
            \n* signAssert(vp)\
            \n* encVp = enc(vp, e2eKey, iv)
return {accE2e, encVp}

ca -> vf ++: Request Verify\n{accE2e, encVp}
    vf -> vf: E2E ECDH 수행\
        \n* accE2e.proof 있으면 검증\
        \n* e2eKey = 암호화키 생성\
        \n* iv = accE2e.iv
    vf -> vf: encVp 복호화\
        \n* vp = dec(debase(encVp), e2eKey, iv)
    vf -> vf: VP 검증\
        \n* vp.proof 검증\
        \n* VC 생애주기 유효성 확인\
        \n* VC 내 이슈어 서명 검증
    vf -> vf: VP 저장 및 서비스 제공
return OK
@enduml


