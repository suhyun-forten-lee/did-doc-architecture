@startuml proc_wallet_token
title
	<size:25>Wallet Token Generation</size>
end title

autonumber "<b>(#)</b>"

participant "**Wallet**" as wal <<Wallet>>
participant "**CApp**" as ca <<App>>
participant "**CApp Provider**" as cap <<Server>>

activate ca

rnote over ca
    **[Pre-defined]**
    * PKG_NAME = CApp package name
end rnote
/ rnote over cap
    **[Pre-defined]**
    * PII = CApp owner's Personal Identifier
end rnote

== 1. WalletTokenSeed ==

ca -> ca: Preparation\
    \n* purpose = Specify according to purpose\
    \n* pkgName = PKG_NAME

ca -> wal ++: Request Wallet Token Seed\n{purpose, pkgName}
    wal -> wal: Validate purpose and pkgName
    note right: Verify pkgName to block unauthorized app access
    wal -> wal: Prepare data\
            \n* validUntil = Validity period\
            \n* nonce = Generate nonce
    wal -> wal: (WalletTokenSeed)seed\
            \n = {purpose, validUntil, pkgName, nonce}
return {seed}

== 2. WalletTokenData ==

ca -> cap ++: Request Wallet Token Data Generation\n{seed}
    cap -> cap: Prepare data\
        \n* sha256_pii = multibase(sha256(PII))\
        \n* provider = Provider information\
        \n* nonce = Generate nonce\
        \n* dataset = {seed, sha256_pii, provider, nonce}
    cap -> cap: CApp Provider Signature\
        \n* priKey = Attestation private key\
        \n* proof = signAssert(dataset, priKey)
    cap -> cap: (WalletTokenData)wtd\
        \n = {seed, sha256_pii, provider, nonce, proof}
return {wtd}

== 3. walletToken ==

ca -> wal ++: Request Wallet Token Generation\n{wtd}
    wal -> wal: Verify CApp Provider Attestation Signature\
            \n* (Optional) Verify Provider Enrollment Certificate VC\
            \n* Verify wtd.proof
    wal -> wal: Generate Wallet Token\
            \n* resultNonce = Generate nonce\
            \n* walletToken = sha256(wtd, resultNonce)
return {resultNonce}

ca -> ca: Generate Wallet Token\
    \n* walletToken = sha256(wtd, resultNonce)

hnote over wal, ca #LimeGreen
    Submit walletToken for Wallet access
end hnote
@enduml


@startuml proc_server_token
title
	<size:25>Server Token Generation</size>
end title

autonumber "<b>(#)</b>"

participant "**Wallet**" as wal <<Wallet>>
participant "**CApp**" as ca <<App>>
participant "**CApp Provider**" as cap <<Server>>
participant "**TAS**" as tas <<Server>>

activate ca

rnote over wal
    **[Pre-defined]**
    * WALLET_ID = Wallet ID
    * WALLET_DID = Wallet DID
end rnote
/ rnote over ca
    **[Pre-defined]**
    * APP_ID = CApp ID
    * sesKey, padding = Generated by ECDH with TAS
end rnote
/ rnote over tas
    **[Pre-defined]**
    * sesKey, padding = Generated by ECDH with CApp
end rnote

== 1. SignedWalletInfo ==

hnote over wal, cap #LimeGreen
    * walletToken = Generate Wallet Token
end hnote

ca -> wal ++: Request Signed Wallet Information {walletToken}
    wal -> wal: Prepare data\
            \n* id = WALLET_ID\
            \n* did = WALLET_DID\
            \n* wallet = {id, did}
    wal -> wal: Generate Wallet Information\
            \n* nonce = Generate nonce\
            \n* dataset = {wallet, nonce}
    wal -> wal: Wallet Signature\
            \n* priKey = Assertion private key\
            \n* proof = signAssert(dataset, priKey)
    wal -> wal: (SignedWalletInfo)swi\
            \n = {wallet, nonce, proof}
return {swi}

== 2. AttestedAppInfo ==

ca -> cap ++: Request Signed App Information\n{APP_ID}
    cap -> cap: Prepare data\
            \n* appId = APP_ID\
            \n* provider = Provider information\
            \n* nonce = Generate nonce\
            \n* dataset = {appId, provider, nonce}
    cap -> cap: CApp Provider Signature\
            \n* priKey = Attestation private key\
            \n* proof = signAssert(dataset, priKey)
    cap -> cap: (AttestedAppInfo)aai\
            \n = {appId, provider, nonce, proof}
return {aai}

== 3. ServerTokenSeed ==

ca -> ca: Generate Token Seed\
        \n* (ServerTokenSeed)seed\
        \n = {purpose, swi, aai}

== 4. ServerTokenData ==

ca -> tas ++: Request Server Token Generation\n{seed}
    tas -> tas: Verify signatures\
            \n* Verify seed.swi.proof\
            \n* (Optional) Verify Provider Enrollment Certificate VC\
            \n* Verify seed.aai.proof
    tas -> tas: (ServerTokenData)std = {\
            \n    purpose = seed.purpose,\
            \n    walletId = seed.swi.wallet.id,\
            \n    caAppId = seed.aai.appId,\
            \n    validUntil = Validity period,\
            \n    provider = Provider information,\
            \n    nonce = Generate nonce\
            \n  }
    tas -> tas: Provider Signature\
            \n* priKey = Attestation private key\
            \n* proof = signAssert(std, priKey)
    tas -> tas: Generate Server Token\n* serverToken = sha256(std)
    tas -> tas: Encrypt Response Information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv, padding)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

== 5. serverToken ==

ca -> ca: Decrypt Response Information\
    \n* tmp = debase(encStd)\
    \n* std = dec(tmp, sesKey, iv, padding)
ca -> ca: Generate Server Token\n* serverToken = sha256(std)

hnote over ca, tas #LimeGreen
    Submit serverToken for TAS access
end hnote
@enduml

