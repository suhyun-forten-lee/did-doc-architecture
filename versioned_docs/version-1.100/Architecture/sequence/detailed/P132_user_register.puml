@startuml P131_user_register

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Settings
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P132: User Registration</size>
end title

'=== Options ===
autonumber "<b>(#)</b>"

'=== Panticipants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**User**" as USER

box Mobile #OldLace
    participant "**Wallet**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**Certified App**" as CA <<App>> #WhiteSmoke    
end box

box TAS Provider #AliceBlue
    participant "**TAS**" as TAS <<WAS>> #WhiteSmoke
end box

box Trusted Storage
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box 

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Constants
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!$refdoc = "Refer to separate document"
!$doc = "Refer to data specification document"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Content
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

== P132-1: User Registration Start Request ==
CA -> TAS++: User Registration Start Request
rnote right of CA #Lavender        
    **[M132_REQ: User Registration Start Request]**
    body : 
        messageId
end note

return User Registration Start Response
rnote right of CA #Lavender        
    **[M132_RES: User Registration Start Response]**
    body : 
        txId
end note

|||
== P132-2: ECDH Request ==
CA -> CA: Prepare ECDH data and sign\
            \n* (ReqEcdh)reqEcdh\
            \n   = Create ECDH request

opt KeyAgreement Signature ON
    CA -> WALLET ++: KeyAgreement Signature Request\n{reqEcdh}
        WALLET -> WALLET: signKeyAgree(reqEcdh)
        note right
            During the actual call:
            * The certified app provides the hash of the original text and the keyId
            * The wallet responds with only the signature value
        end note
    return {reqEcdh}
end

CA -> TAS++ : ECDH Request
rnote right of CA #Lavender
    **[M132_REQ : ECDH Request]**
    body : 
        messageId
        txId
        reqEcdh
end note

    opt KeyAgreement Signature ON
        TAS -> TAS: Verify reqEcdh.proof signature
    end

    TAS -> TAS: Perform ECDH\
                \n* sesKey = Session Key\
                \n* (AccEcdh)accEcdh\
                \n   = Create ECDH acceptance

    opt KeyAgreement Signature ON
        TAS -> TAS: signKeyAgree(accEcdh)
    end

return ECDH Response
rnote right of CA #Lavender
    **[M132_RES : ECDH Response]**
    body : 
        txId
        accEcdh
end note

opt KeyAgreement Signature ON
    CA -> CA: Verify accEcdh.proof signature
end

CA -> CA: Perform ECDH\n* sesKey = Session Key

|||
== P132-3: Server Token Creation Request ==
hnote over CA, WALLET #LimeGreen
    * purpose = "CreateDid"
    * (SignedWalletInfo)walletInfo = Create wallet information
    * walletToken = Wallet token
end hnote

CA -> CA: * (AttestedAppInfo)caAppInfo\
        \n   = Create signed app information

CA -> CA: Generate server token seed\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "CreateDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

CA -> TAS++ : Server token creation request
rnote right of CA #Lavender
    **[M132_REQ : Server Token Creation Request]**
    body : 
        messageId
        txId
        seed
end note

    TAS -> TAS: Verify signature\
            \n* Verify wallet signature\
            \n* Verify certified app provider signature

    TAS -> TAS: Extract information from seed\
            \n* appId = Certified app identifier\
            \n* walletId = Wallet identifier\
            \n* walletDid = Wallet DID\
            \n* walletProviderDid = Wallet provider DID

    TAS -> TAS: Verify if it matches the registered wallet information

    TAS -> TAS: Generate and store server token\
            \n* Create (ServerTokenData)std\
            \n* serverToken = sha256(std)

    TAS -> TAS: Encrypt response information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)


return Server Token Creation Response
rnote right of CA #Lavender
    **[M132_RES : Server Token Creation Response]**
    body : 
        txId
        iv
        encStd
end note

CA -> CA: Decryption (omitted) and prepare data\
        \n* Calculate serverToken

|||
== User KYC  ==
rnote across #white
    After the user performs KYC, identifiers such as PII (Personally Identifiable Information) must be registered.
    This process is not covered in this specification.
end note

|||
== P132-4: User Registration Request ==

CA -> WALLET ++: User DID Key Creation Request\n{walletToken}
    WALLET -> WALLET: Validate walletToken

    USER -[#Blue]\ WALLET: Enter PIN
    WALLET -> WALLET: Generate PIN Key

    opt If the user prefers
        USER -[#Blue]\ WALLET: Fingerprint/Face Recognition
        WALLET -> WALLET: Generate BIO Key
    end

    WALLET -> WALLET: Generate key for key exchange
return OK

CA -> WALLET ++: User Registration Request\n{walletToken, serverToken}
    WALLET -> WALLET: Validate walletToken

    WALLET -> WALLET: (DidDoc)didDoc \
            \n  = Create DID Document
    WALLET -> WALLET: (OwnerDidDoc)ownerDidDoc\
            \n  = Sign with individual key (didDoc)
    WALLET -> WALLET: (SignedDidDoc)sgdDidDoc = {\
            \n   ownerDidDoc,\
            \n   wallet = Wallet information,\
            \n   nonce = Generate nonce\
            \n }
    WALLET -> WALLET: Wallet signature\
            \n* signAssert(sgdDidDoc)

    WALLET -> TAS ++: User Registration Request
    rnote right of WALLET #Lavender
        **[M132_REQ : User Registration Request]**
        body:
            messageId
            txId
            serverToken
            signedDidDoc
    end note
        TAS -> TAS: Validate serverToken

        TAS -> TAS: Verify signatures\
            \n* Verify wallet signature\
            \n* Verify individual key signature
        
        TAS -> TAS: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS information,\
            \n   nonce = Generate nonce\
            \n }

        TAS -> TAS: Controller signature\
            \n* signInvoke(invDidDoc)

        TAS -> BC ++: DID Registration Request\n{invDidDoc}
            BC -> BC: Verify Controller\nsignature
            BC -> BC: Register
        return OK

        TAS -> TAS: Store user mapping information in DB\
                \n* pii (Personal Identification Number)\
                \n* holderDid (User DID)\
                \n* walletId (Wallet identifier)\
                \n* appId (Certified app identifier)
        return User Registration Response
        rnote right of WALLET #Lavender
            **[M132_REQ : User Registration Response]**
            body:
                txId
        end note
return OK

|||
== P132-5: User Registration Completion ==
CA -> TAS++: User Registration Completion Request
rnote right of CA #Lavender        
    **[M132_REQ: User Registration Completion Request]**
    body:
        messageId
        txId
        serverToken
end note

    TAS -> TAS: Validate serverToken
    TAS -> TAS: Delete session information and close transaction

return User Registration Completion Response
rnote right of CA #Lavender        
    **[M132_RES: User Registration Completion Response]**
    body:
        txId
end note

|||
|||
@enduml

