@startuml P210_issue_vc
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Configuration
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>VC Issuance</size>
end title

'=== Options ===
' Autonumbering: ex) "<b>000." => Display a 3-digit number with leading zeros
autonumber "<b>(#)</b>"
' Hide the participant box at the bottom of the page
'hide footbox

'=== Constants ===

!$refdoc = "Refer to separate document"
!$doc = "Refer to data specification document"

'=== Participants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**User**" as user
box Mobile #OldLace
    participant "**Certified App**" as ca <<App>>
    participant "**Wallet**" as wal <<Wallet>>
end box
participant "**TAS**" as tas <<Server>>
participant "**Issuer**" as vf <<Server>>

box Trust Repository
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box

|||
== Offer Request ==

hnote over ca, vf #LimeGreen
    Obtain the following information during the initiation stage:
    * vcPlanId, (optional) issuer, (optional) offerId
end hnote

rnote over ca, vf
    (Optional process)
    KYC may be performed before requesting the Issue Profile so that the TAS can obtain a personal identification number.
    The certified app may also perform KYC and pass the personal identification number to the TAS.
    
    * pii = Personal Identification Number
end rnote

|||
== P210-1: Propose Issue VC ==

activate ca

ca -> tas ++: Propose Issue VC\n{vcPlanId[, issuer, offerId]}
    tas -> tas: * Validate VC plan\n* Identify issuing issuer
    note right
        Identification of the issuing issuer is done by checking the TAS DB or
        information stored in internal settings.
    end note
    tas -> vf ++: Inspect Proposal\n{vcPlanId[, issuer, offerId]}
        vf -> vf: Check if VC issuance is possible
        vf -> vf: refId = Generate reference number
    return {refId}
return {refId}

|||
== P210-2 : Request ECDH ==

ca -> ca: Prepare ECDH Data and Sign\
        \n* (ReqEcdh)reqEcdh\
        \n   = Generate ECDH Request

opt KeyAgreement Signature ON
    ca -> wal ++: Request KeyAgreement Signature\n{reqEcdh}
        wal -> wal: signKeyAgree(reqEcdh)
        note right
            During the actual call:
            * The certified app sends the hash of the original message and keyId
            * The wallet only responds with the signature value
        end note
    return {reqEcdh}
end

ca -> tas ++: Request ECDH\n{reqEcdh}
    opt KeyAgreement Signature ON
        tas -> tas: Verify reqEcdh.proof signature
    end
    tas -> tas: Perform ECDH\
            \n* sesKey = Session Key\
            \n* (AccEcdh)accEcdh\
            \n   = Generate ECDH Acceptance

    opt KeyAgreement Signature ON
        tas -> tas: signKeyAgree(accEcdh)
    end

return {accEcdh}
opt KeyAgreement Signature ON
    ca -> ca: Verify accEcdh.proof signature
end
ca -> ca: Perform ECDH\n* sesKey = Session Key

|||
== P210-3 : Request Create Token ==

hnote over ca, wal #LimeGreen
    * purpose = "IssueVc"
    * (SignedWalletInfo)walletInfo = Generate wallet information
    * walletToken = Wallet token
end hnote

ca -> ca: * (AttestedAppInfo)caAppInfo\
        \n   = Generate signed app information
ca -> ca: Generate server token seed\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "IssueVc",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

ca -> tas ++: Request Create Token\n{seed}
    tas -> tas: Verify signatures\
            \n* Verify wallet signature\
            \n* Verify certified app provider signature
    tas -> tas: Generate and store server token\
            \n* Generate (ServerTokenData)std\
            \n* serverToken = sha256(std)
    tas -> tas: Encrypt response information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

ca -> ca: Decrypt (omitted) and prepare data\
        \n* Calculate serverToken



|||
== P210-4 : Request Issue Profile ==

ca -> tas ++: Request Issue Profile\n{serverToken}
    tas -> tas: Verify authorization and identify holder\
            \n* Validate serverToken\
            \n* holderDid = Holder DID
    tas -> vf ++: Generate Profile\n{holderDid[, pii]}
        vf -> vf: Prepare profile-related data\
                \n* issuerNonce = Generate nonce for issuance\
                \n* (ReqE2e)reqE2e = Create E2E request information\
                \n* Other data is omitted
        vf <-> BC: Query/Retrieve Issuer DID Doc
                rnote right of vf #MintCream    
                    **DidDoc** : $doc
                end note
        vf -> vf: (IssueProfile)profile = Create Profile
    return {profile}
    tas -> tas: * authNonce = Generate nonce for DID Auth
return {authNonce, profile}


|||
== P210-5 : Request Issue VC ==

ca -> wal ++: VC Issuance Request\n{walletToken, serverToken,\
        \n   refId, authNonce, profile}
    wal -> wal: Validate walletToken

    wal -> wal: Verify profile.proof signature
    wal -> wal: Prepare DID Auth data\
        \n* (DidAuth)didAuth = {\
        \n     did = Holder DID,\
        \n     authNonce\
        \n  }
    user -[#Blue]\ wal: User authentication (non-standard)
    wal -> wal: signAuth(didAuth)

    wal -> wal: Perform ECDH for E2E\
            \n* _, pubKeyE2E = Generate ECC key pair\
            \n* e2eKey = Generate encryption key using E2E data from the profile\
            \n* iv = Generate IV\
            \n* (AccE2e)accE2e = {pubKeyE2E, iv}\
            \n* signKeyAgree(accE2e)
    wal -> wal: Generate and encrypt issuance request information\
            \n* Generate (ReqVc)reqVc\
            \n* encReqVc = enc(data, e2eKey, iv)

    wal -> tas ++: Request Issue VC\n{serverToken, didAuth, accE2e, encReqVc}
        tas -> tas: Validate serverToken
        tas -> tas: Validate DID Auth\
                \n* Verify didAuth.proof\
                \n* Check if authNonce matches
        tas -> vf ++: Issue VC\n{accE2e, encReqVc}
            vf -> vf: Perform ECDH for E2E\
                    \n* Verify accE2e.proof\
                    \n* Generate e2eKey\
                    \n* iv = accE2e.iv
            vf -> vf: Decrypt encReqVc\
                    \n* tmp = debase(encReqVc)\
                    \n* reqVc = dec(tmp, e2eKey, iv)
            vf -> vf: Validate reqVc against IssueProfile\
                    \n* Check if refId matches\
                    \n* Check if profile.id matches\
                    \n* Check if profile.issuerNonce matches
            vf <-> BC: Retrieve Issuer DID Doc
                rnote right of vf #MintCream    
                    **DidDoc** : $doc
                end note
            vf -> vf: vc = **Issue or Reissue VC**            
            vf -> BC: Generate/Register vcMeta
                rnote right of vf #MintCream    
                    **vcMeta** : $doc
                end note
            vf -> vf: Encrypt vc\
                    \n* iv = Generate IV\
                    \n* tmp = enc(vc, e2eKey, iv)\
                    \n* encVc = multibase(tmp)
        return {encVc, iv}
    return {encVc, iv}

    wal -> wal: Decrypt encVc\
            \n* tmp = debase(encVc)\
            \n* vc = dec(tmp, e2eKey, iv)
    wal -> wal: Verify issuer signature and store VC
    wal -> wal: vcId = Extract VC ID
return {vcId}


|||
== P210-6 : Confirm Issue VC ==

ca -> tas ++: Confirm Issue VC\n{vcId}
    tas -> vf ++: Complete VC\n{vcId}
        vf -> vf: Verify vcId and complete the process
    return OK
return OK

|||
|||
@enduml