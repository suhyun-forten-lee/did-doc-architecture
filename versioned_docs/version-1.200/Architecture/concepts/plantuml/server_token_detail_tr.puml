@startuml proc_server_token_detail
title
	<size:25>Server Token Creation</size>
end title

autonumber "<b>(#)</b>"

participant "**Wallet**" as wal <<Wallet>>
participant "**Certified App**" as ca <<App>>
participant "**Certified App Service**" as cap <<Server>>
participant "**TA**" as tas <<Server>>

activate ca

rnote over wal
    **[Pre-defined]**
    * WALLET_ID = Wallet ID
    * WALLET_DID = Wallet DID
end rnote
/ rnote over ca
    **[Pre-defined]**
    * APP_ID = Certified App ID
    * sesKey, padding = Generated with TAS and ECDH
end rnote
/ rnote over tas
    **[Pre-defined]**
    * sesKey, padding = Generated with Certified App and ECDH
end rnote

== 1. SignedWalletInfo ==

hnote over wal, cap #LimeGreen
    * walletToken = Generate wallet token
end hnote

ca -> wal ++: Request Signed Wallet Info {walletToken}
    wal -> wal: Prepare Data\
            \n* id = WALLET_ID\
            \n* did = WALLET_DID\
            \n* wallet = {id, did}
    wal -> wal: Generate Wallet Info\
            \n* nonce = Generate random number\
            \n* dataset = {wallet, nonce}
    wal -> wal: Sign Wallet\
            \n* priKey = Assertion private key\
            \n* proof = signAssert(dataset, priKey)
    wal -> wal: (SignedWalletInfo)swi\
            \n = {wallet, nonce, proof}
return {swi}

== 2. AttestedAppInfo ==

ca -> cap ++: Request Signed App Info\n{APP_ID}
    cap -> cap: Prepare Data\
            \n* appId = APP_ID\
            \n* provider = Provider Information\
            \n* nonce = Generate random number\
            \n* dataset = {appId, provider, nonce}
    cap -> cap: Certified App Provider Signature\
            \n* priKey = Attestation private key\
            \n* proof = signAssert(dataset, priKey)
    cap -> cap: (AttestedAppInfo)aai\
            \n = {appId, provider, nonce, proof}
return {aai}

== 3. ServerTokenSeed ==

ca -> ca: Generate Token Seed\
        \n* (ServerTokenSeed)seed\
        \n = {purpose, swi, aai}

== 4. ServerTokenData ==

ca -> tas ++: Request Server Token Creation {seed}
    tas -> tas: Verify Signature\
            \n* Validate seed.swi.proof\
            \n* (Optional) Verify Provider Membership Certificate VC\
            \n* Validate seed.aai.proof
    tas -> tas: (ServerTokenData)std = {\
            \n    purpose = seed.purpose,\
            \n    walletId = seed.swi.wallet.id,\
            \n    caAppId = seed.aai.appId,\
            \n    validUntil = Expiry Date,\
            \n    provider = Provider Information,\
            \n    nonce = Generate random number\
            \n  }
    tas -> tas: Provider Signature\
            \n* priKey = Attestation private key\
            \n* proof = signAssert(std, priKey)
    tas -> tas: Generate Server Token\n* serverToken = sha256(std)
    tas -> tas: Encrypt Response Data\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv, padding)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

== 5. serverToken ==

ca -> ca: Decrypt Response Data\
    \n* tmp = debase(encStd)\
    \n* std = dec(tmp, sesKey, iv, padding)
ca -> ca: Generate Server Token\n* serverToken = sha256(std)

hnote over ca, tas #LimeGreen
    Submit serverToken when accessing TAS
end hnote
@enduml
