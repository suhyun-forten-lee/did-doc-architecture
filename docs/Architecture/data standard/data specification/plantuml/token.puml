@startuml proc_wallet_token_ko
title
	<size:25>월렛토큰 생성</size>
end title

autonumber "<b>(#)</b>"

participant "**월렛**" as wal <<Wallet>>
participant "**인가앱**" as ca <<App>>
participant "**인가앱 사업자**" as cap <<Server>>

activate ca

rnote over ca
    **[Pre-defined]**
    * PKG_NAME = 인가앱의 패키지명
end rnote
/ rnote over cap
    **[Pre-defined]**
    * PII = 인가앱 소유자의 개인식별자
end rnote

== 1. WalletTokenSeed ==

ca -> ca: 준비\
    \n* purpose = 용도에 맞게 지정\
    \n* pkgName = PKG_NAME

ca -> wal ++: 월렛토큰 시드 생성요청\n{purpose, pkgName}
    wal -> wal: purpose, pkgName 유효성 확인
    note right: pkgName 값을 확인하여 인가되지 않은 앱의 접근 차단
    wal -> wal: 데이터 준비\
            \n* validUntil = 유효일시\
            \n* nonce = 난수 생성
    wal -> wal: (WalletTokenSeed)seed\
            \n = {pupose, validUntil, pkgName, nonce}
return {seed}

== 2. WalletTokenData ==

ca -> cap ++: 월렛토큰 데이터 생성요청\n{seed}
    cap -> cap: 데이터 준비\
        \n* sha256_pii = multibase(sha256(PII))\
        \n* provider = 사업자 정보\
        \n* nonce = 난수 생성\
        \n* dataset = {seed, sha256_pii, provider, nonce}
    cap -> cap: 인가앱 사업자 서명\
        \n* priKey = Attestation 개인키\
        \n* proof = signAssert(dataset, priKey)
    cap -> cap: (WalletTokenData)wtd\
        \n = {seed, sha256_pii, provider, nonce, proof}
return {wtd}

== 3. walletToken ==

ca -> wal ++: 월렛토큰 생성요청\n{wtd}
    wal -> wal: 인가앱 사업자 Attestation 서명 검증\
            \n* (옵션)사업자 가입증명서 VC 검증\
            \n* wtd.proof 검증
    wal -> wal: 월렛토큰 생성\
            \n* resultNonce = 난수 생성\
            \n* walletToken = sha256(wtd, resultNonce)
return {resultNonce}

ca -> ca: 월렛토큰 생성\
    \n* walletToken = sha256(wtd, resultNonce)

hnote over wal, ca #LimeGreen
    월렛에 접근 시 walletToken 제출
end hnote
@enduml


@startuml proc_server_token_ko
title
	<size:25>서버토큰 생성</size>
end title

autonumber "<b>(#)</b>"

participant "**월렛**" as wal <<Wallet>>
participant "**인가앱**" as ca <<App>>
participant "**인가앱 사업자**" as cap <<Server>>
participant "**TAS**" as tas <<Server>>

activate ca

rnote over wal
    **[Pre-defined]**
    * WALLET_ID = 월렛 id
    * WALLET_DID = 월렛 did
end rnote
/ rnote over ca
    **[Pre-defined]**
    * APP_ID = 인가앱 id
    * sesKey, padding = TAS와 ECDH로 생성
end rnote
/ rnote over tas
    **[Pre-defined]**
    * sesKey, padding = 인가앱과 ECDH로 생성
end rnote

== 1. SignedWalletInfo ==

hnote over wal, cap #LimeGreen
    * walletToken = 월렛토큰 생성
end hnote

ca -> wal ++: 서명된 월렛정보 요청 {walletToken}
    wal -> wal: 데이터 준비\
            \n* id = WALLET_ID\
            \n* did = WALLET_DID\
            \n* wallet = {id, did}
    wal -> wal: 월렛정보 생성\
            \n* nonce = 난수 생성\
            \n* dataset = {wallet, nonce}
    wal -> wal: 월렛 서명\
            \n* priKey = Assertion 개인키\
            \n* proof = signAssert(dataset, priKey)
    wal -> wal: (SignedWalletInfo)swi\
            \n = {wallet, nonce, proof}
return {swi}

== 2. AttestedAppInfo ==

ca -> cap ++: 서명된 앱정보 요청\n{APP_ID}
    cap -> cap: 데이터 준비\
            \n* appId = APP_ID\
            \n* provider = 사업자 정보\
            \n* nonce = 난수 생성\
            \n* dataset = {appId, provider, nonce}
    cap -> cap: 인가앱 사업자 서명\
            \n* priKey = Attestation 개인키\
            \n* proof = signAssert(dataset, priKey)
    cap -> cap: (AttestedAppInfo)aai\
            \n = {appId, provider, nonce, proof}
return {aai}

== 3. ServerTokenSeed ==

ca -> ca: 토큰 시드 생성\
        \n* (ServerTokenSeed)seed\
        \n = {purpose, swi, aai}

== 4. ServerTokenData ==

ca -> tas ++: 서버토큰 생성요청 {seed}
    tas -> tas: 서명 검증\
            \n* seed.swi.proof 검증\
            \n* (옵션)사업자 가입증명서 VC 검증\
            \n* seed.aai.proof 검증
    tas -> tas: (ServerTokenData)std = {\
            \n    purpose = seed.purpose,\
            \n    walletId = seed.swi.wallet.id,\
            \n    caAppId = seed.aai.appId,\
            \n    validUntil = 유효일시,\
            \n    provider = 사업자 정보,\
            \n    nonce = 난수 생성\
            \n  }
    tas -> tas: 사업자 서명\
            \n* priKey = Attestation 개인키\
            \n* proof = signAssert(std, priKey)
    tas -> tas: 서버토큰 생성\n* serverToken = sha256(std)
    tas -> tas: 응답정보 암호화\
            \n* iv = IV 생성\
            \n* tmp = enc(std, sesKey, iv, padding)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

== 5. serverToken ==

ca -> ca: 응답정보 복호화\
    \n* tmp = debase(encStd)\
    \n* std = dec(tmp, sesKey, iv, padding)
ca -> ca: 서버토큰 생성\n* serverToken = sha256(std)

hnote over ca, tas #LimeGreen
    TAS에 접근 시 serverToken 제출
end hnote
@enduml

