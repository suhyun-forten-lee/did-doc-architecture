@startuml seq_issuance_controller
title
	<size:25>Summary of Issue VC Protocol</size>
end title

autonumber "<b>(#)</b>"

!define apiText(text) <color:OrangeRed>[API] text</color>

box User Mobile #OldLace
    participant "**CApp**" as ca <<App>>
    participant "**Client Wallet**" as wal <<SDK>>
end box
participant "**Trust Agent**" as tas <<Server>>
participant "**Issuer Service**" as iss <<Server>>

== (C) Initiation ==

activate ca
alt Issuer-init
    ca <[#Blue]-?: Obtain IssueOfferPayload
else User-init
    ca <[#Blue]-?: Select VC Plan, Issuer by user
end

== (D) Issueance ==

ca -> tas ++: apiText("Propose Issue VC")
    tas -> iss ++: apiText("Inspect Propose Issue")
        iss -> iss: refId = Generate reference id
    return {refId}
return {refId}

ca -> tas ++: apiText("Request ECDH")
return OK

ca -> tas ++: apiText("Request Create Token")
return {serverTokenData}

ca -> ca: Calculate serverToken

ca -> tas ++: apiText("Request Issue Profile")
    tas -> iss ++: apiText("Generate Issue Profile")
        iss -> iss: profile = Generate IssueProfile
    return {profile}
return {profile}

ca -> wal ++: Request to issue VC\n{refId, profile, serverToken}
    wal -> tas ++: apiText("Request Issue VC")\n{refId, serverToken}
        tas -> iss ++: apiText("Issue VC") {refId}
            iss -> iss: * vc = Issue VC\
                    \n* encVc = encrypt(vc)
        return {encVc}
    return {encVc}
    wal -> wal: * vc = decrypt(encVc)\
            \n* Store vc\
            \n* vcId = Extract VC id
return {vcId}

ca -> tas ++: apiText("Confirm Issue VC")\n {vcId}
    tas -> iss ++: apiText("Complete VC")\n {vcId}
    return OK
return OK

@enduml
