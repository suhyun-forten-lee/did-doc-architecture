
@startuml P310_submit_vp
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Configuration
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P310: VP Submission</size>
end title

'=== Options ===
' Autonumbering: e.g., "<b>000." => Display a 3-digit number with leading zeros
autonumber "<b>(#)</b>"
' Hide the participant box at the bottom of the page
'hide footbox

'=== Participants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

box Mobile #OldLace
    participant "**Wallet**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**Certified App**" as CA <<App>> #WhiteSmoke    
end box

box Verification Server #AliceBlue
    participant "**Verifier**" as SP <<WAS>> #WhiteSmoke
end box

box Trust Repository
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box


'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Constants
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

!$refdoc = "Refer to a separate document"
!$doc = "Refer to data specification document"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Content
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||


== Offer 요청  ==


rnote across #white    
    In the Offer stage, no standard API is defined; only the data format for the payload is specified.
    How the Offer is transmitted is beyond the scope of this document.
end note

|||
== P310-1: Request Profile ==
activate CA

CA -> SP++ : Request Profile
rnote right of CA #Lavender
    **[M310_Req: Request Profile]**    
    body: 
        messageId
        offerId
        verifierTxId
end note

SP -> SP: Validate offerId

SP -> SP: Prepare profile-related data\
            \n* verifierNonce = Generate nonce for submission\
            \n* (ReqE2e) reqE2e = Create E2E request information
SP <-> BC: Retrieve Verifier DID Doc

rnote right of SP #MintCream    
    **DidDoc** : $doc
end note
SP -> SP: Create / Sign Verify Profile
rnote right of SP #MintCream    
    **VerifyProfile** : $doc
end note

return
rnote right of CA #Lavender
    **[M310_Res: Profile Response]**
    body: 
        verifyProfile
        verifierTxId
end note


|||
== Profile Verification ==

CA <-> BC: Retrieve Verifier DID Doc / Response

rnote right of CA #MintCream    
    **DidDoc** : $doc
end note

CA -> CA: Verify VerifyProfile signature
rnote right of CA #MintCream    
    **VerifyProfile** : $doc
end note

CA -> CA: Check user-submitted information


|||
== Wallet Token Generation ==

rnote over WALLET, CA #white
    Wallet Token Generation: Certified App -> Wallet
end note

|||
== VP Generation ==

CA -> WALLET++ : VP Generation Request \n{VerifyProfile, \nUser-selected submission information}
WALLET -> WALLET : Generate VP (VP)
rnote right of WALLET #MintCream    
    **VP** : $refdoc
end note

WALLET -> WALLET : User authentication
WALLET -> WALLET : Generate VP signature \n(VpProof)
rnote right of WALLET #MintCream    
    **VpProof** : $doc
end note

WALLET -> WALLET : Generate temporary key pair \nCreate session key
WALLET -> WALLET : Encrypt VP \n(encVpProof)
rnote right of WALLET #MintCream    
    encVpProof = multibase(enc(iv, VpProof, seskey))

    * IV application may vary based on the KDF method
end note

WALLET -> WALLET : Generate VP message \n(VpMsg)
rnote right of WALLET #MintCream    
    **VpMsg** : $doc    
end note

return VP Generation Request Response \n{VpMsg}



|||
== P310-2: eVP Submission and Verification ==

CA -> SP++ : eVP (Encrypted VP) Verification Request
rnote right of CA #Lavender
    **[M310_Req: eVP (Encrypted VP) Submission]**    
    body: 
        messageId
        verifierTxId
        accE2e
        VpMsg(enc)
end note

SP -> SP: Retrieve transaction code
SP -> SP: Perform E2E ECDH\
        \n* If accE2e.proof exists, verify it\
        \n* e2eKey = Generate encryption key\
        \n* iv = accE2e.iv
        
SP -> SP: Decrypt eVP\
        \n* vp = decrypt(encVp, e2eKey, iv)

SP -> SP: Check AuthType / nonce consistency

SP <-> BC: Retrieve Holder / Issuer DID Doc
rnote right of SP #MintCream    
    **DidDoc** : $doc
end note

SP -> SP: Verify VP signature\
        \n* Verify vp.proof\
        \n* Validate the lifecycle of the VC\
        \n* Verify the issuer signature within the VC
        
return
rnote right of CA #Lavender
    **[M310_Res: eVP Verification Response]**      
        body: 
            verifierTxId        
end note


|||
|||
@enduml

