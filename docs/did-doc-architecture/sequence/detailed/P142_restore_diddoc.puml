@startuml P142_restore_diddoc

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Settings
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P141 : Restore DID Document Update</size>
end title

'=== Options ===
autonumber "<b>(#)</b>"

'=== Panticipants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**User**" as USER

box Mobile #OldLace
    participant "**Wallet**" as WALLET <<Wallet>> #WhiteSmoke
    participant "**Certified App**" as CA <<App>> #WhiteSmoke    
end box

box TAS Provider #AliceBlue
    participant "**TAS**" as TAS <<WAS>> #WhiteSmoke
end box

box Trusted Storage
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box 

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Constants
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!$refdoc = "Refer to separate document"
!$doc = "Refer to data specification document"

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Content
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|||

rnote across #white
    TAS must request a DID Document recovery offer from the certified app, and during this process, the certified app must obtain an offerId.
    The offer process is not covered in this specification.
end hnote


== P142-1: User DID Document Recovery Start Request ==
CA -> TAS++: User DID Document Recovery Start Request
rnote right of CA #Lavender        
    **[M142_REQ: User DID Document Recovery Start Request]**
    body : 
        messageId
        offerId
        did
end note

    TAS -> TAS: Check if the DID is in a modifiable state
    TAS -> TAS: authNonce = Generate nonce for DID Auth

return User DID Document Update Start Response
rnote right of CA #Lavender        
    **[M142_RES: User DID Document Update Start Response]**
    body : 
        txId
        authNonce
end note


|||
== P142-2: ECDH Request  ==
CA -> CA: Prepare ECDH Data and Sign\
            \n* (ReqEcdh)reqEcdh\
            \n   = Generate ECDH Request

opt KeyAgreement Signature ON
    CA -> WALLET ++: KeyAgreement Signature Request\n{reqEcdh}
        WALLET -> WALLET: signKeyAgree(reqEcdh)
        note right
            During the actual call:
            * The certified app sends the hash of the original and the keyId
            * The wallet only responds with the signature value
        end note
    return {reqEcdh}
end

CA -> TAS++ : ECDH Request
rnote right of CA #Lavender
    **[M142_REQ : ECDH Request]**
    body : 
        messageId
        txId
        reqEcdh
end note

    opt KeyAgreement Signature ON
        TAS -> TAS: Verify reqEcdh.proof signature
    end

    TAS -> TAS: Perform ECDH\
                \n* sesKey = Session Key\
                \n* (AccEcdh)accEcdh\
                \n   = Generate ECDH Acceptance

    opt KeyAgreement Signature ONx
        TAS -> TAS: signKeyAgree(accEcdh)
    end

return ECDH Response
rnote right of CA #Lavender
    **[M142_RES : ECDH Response]**
    body : 
        txId
        accEcdh
end note

opt KeyAgreement Signature ON
    CA -> CA: Verify accEcdh.proof signature
end

CA -> CA: Perform ECDH\n* sesKey = Session Key

|||
== P142-3: Server Token Generation Request  ==
hnote over CA, WALLET #LimeGreen
    * purpose = "RestoreDid"
    * (SignedWalletInfo)walletInfo = Generate wallet information
    * walletToken = Wallet token
end hnote

CA -> CA: * (AttestedAppInfo)caAppInfo\
        \n   = Generate signed app information

CA -> CA: Generate server token seed\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "RestoreDid",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

CA -> TAS++ : Server Token Generation Request
rnote right of CA #Lavender
    **[M142_REQ : Server Token Generation Request]**
    body : 
        messageId
        txId
        seed
end note

    TAS -> TAS: Verify signatures\
            \n* Verify wallet signature\
            \n* Verify certified app provider signature

    TAS -> TAS: Extract information from seed\
            \n* appId = Certified app identifier\
            \n* walletId = Wallet identifier\
            \n* walletDid = Wallet DID\
            \n* walletProviderDid = Wallet provider DID

    TAS -> TAS: Check consistency with registered wallet information

    TAS -> TAS: Generate and store server token\
            \n* Generate (ServerTokenData)std\
            \n* serverToken = sha256(std)

    TAS -> TAS: Encrypt response information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)

return Server Token Generation Response
rnote right of CA #Lavender
    **[M142_RES : Server Token Generation Response]**
    body : 
        txId
        iv
        encStd
end note

CA -> CA: Decrypt (omitted) and prepare data\
        \n* Calculate serverToken

|||
== P142-4: User DID Document Recovery Request ==

CA -> WALLET ++: User DID Document Recovery Request\n{walletToken, serverToken}
    WALLET -> WALLET: Validate walletToken

    WALLET -> WALLET: Prepare DID Auth data\
    \n* (DidAuth)didAuth = {\
    \n     did = Holder DID,\
    \n     authNonce\
    \n  }

    USER -[#Blue]\ WALLET: User authentication
    WALLET -> WALLET: signAuth(didAuth)

    WALLET -> TAS ++: User DID Document Recovery Request
    rnote right of WALLET #Lavender
        **[M142_REQ : User DID Document Recovery Request]**
        body:
            messageId
            txId
            serverToken
            didAuth
    end note
        TAS -> TAS: Validate serverToken

        TAS -> TAS: Validate DID Auth\
                \n* Verify didAuth.proof\
                \n* Check if authNonce matches

        TAS -> TAS: Validate signatures\
            \n* Verify wallet signature\
            \n* Verify individual key signature
        
        TAS -> BC ++: Request user didDoc
        return didDoc

        TAS -> TAS: Update didDoc state\
            \n* didDoc.deactivated = false

        TAS -> TAS: Check user mapping information in DB\
        \n* holderDid (User DID)\
        \n* walletId (Wallet identifier)\
        \n* appId (Certified app identifier)

        TAS -> TAS: (InvokedDidDoc)invDidDoc = {\
            \n   didDoc,\
            \n   controller = TAS information,\
            \n   nonce = Generate nonce\
            \n }

        TAS -> TAS: Controller signature\
            \n* signInvoke(invDidDoc)

        TAS -> BC ++: DID Update Request\n{invDidDoc}
            BC -> BC: Verify Controller\nsignature
            BC -> BC: Update
        return OK

        return User DID Document Recovery Response
        rnote right of WALLET #Lavender
            **[M142_REQ : User DID Document Recovery]**
            body:
                txId
        end note
return OK


|||
== P142-5: User DID Document Update Completion ==
CA -> TAS++: User DID Document Update Completion Request
rnote right of CA #Lavender        
    **[M142_REQ: User DID Document Update Completion Request]**
    body:
        messageId
        txId
        serverToken
end note

    TAS -> TAS: Validate serverToken
    TAS -> TAS: Delete session information and end transaction

return User Registration Completion Response
rnote right of CA #Lavender        
    **[M142_RES: User DID Document Update Completion Request]**
    body:
        txId
end note

|||
|||
@enduml

