@startuml P220_revoke_vc

'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Configuration
'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
'=== Header and Footer ===
header OPEN-DID Technical Specification
footer
  	Page %page% of %lastpage% at %date("yyyy-MM-dd hh:mm:ss")
end footer

'=== Title ===
title
	<size:25>P220: VC Revocation</size>
end title

'=== Options ===
' Autonumbering: e.g., "<b>000." => Display a 3-digit number with leading zeros
autonumber "<b>(#)</b>"
' Hide the participant box at the bottom of the page
'hide footbox

'=== Constants ===

!$refdoc = "Refer to a separate document"
!$doc = "Refer to data specification document"

'=== Participants ===
skinparam ParticipantPadding 20
skinparam BoxPadding 20
skinparam MaxMessageSize 500
skinparam MinClassWidth 80

actor "**User**" as user
box Mobile #OldLace
    participant "**Certified App**" as ca <<App>>
    participant "**Wallet**" as wal <<Wallet>>
end box
participant "**TAS**" as tas <<Server>>
participant "**Issuer**" as vf <<Server>>

box Trust Repository
    participant "**blockchain**" as BC <<Storage>> #WhiteSmoke
end box

|||
== P220-1: Propose Revoke VC ==

activate ca

ca -> tas ++: Propose Revoke VC\n{vcId}
    tas <-> BC: Retrieve VC Meta
    tas -> tas: Confirm Issuer DID
    tas -> vf ++: Inspect Propose Revoke\n{vcId}
    note right
        Identification of the issuing issuer is done by checking the TAS DB or
        information stored in internal settings.
    end note
        vf -> vf: Check if VC revocation is possible
        vf -> vf: issuerNonce = Generate nonce for user signature verification
        vf -> vf: authType: Retrieve user authentication method
    return {issuerNonce, authType}
return {issuerNonce, authType}

|||
== P220-2: Request ECDH ==

ca -> ca: Prepare ECDH Data and Sign\
        \n* (ReqEcdh)reqEcdh\
        \n   = Generate ECDH Request

opt KeyAgreement Signature ON
    ca -> wal ++: Request KeyAgreement Signature\n{reqEcdh}
        wal -> wal: signKeyAgree(reqEcdh)
        note right
            During the actual call:
            * The certified app sends the hash of the original message and keyId
            * The wallet only responds with the signature value
        end note
    return {reqEcdh}
end

ca -> tas ++: Request ECDH\n{reqEcdh}
    opt KeyAgreement Signature ON
        tas -> tas: Verify reqEcdh.proof signature
    end
    tas -> tas: Perform ECDH\
            \n* sesKey = Session Key\
            \n* (AccEcdh)accEcdh\
            \n   = Generate ECDH Acceptance

    opt KeyAgreement Signature ON
        tas -> tas: signKeyAgree(accEcdh)
    end

return {accEcdh}
opt KeyAgreement Signature ON
    ca -> ca: Verify accEcdh.proof signature
end
ca -> ca: Perform ECDH\n* sesKey = Session Key


|||
== P220-3: Request Create Token ==

hnote over ca, wal #LimeGreen
    * purpose = "RevokeVc"
    * (SignedWalletInfo)walletInfo = Generate wallet information
    * walletToken = Wallet token
end hnote

ca -> ca: * (AttestedAppInfo)caAppInfo\
        \n   = Generate signed app information
ca -> ca: Generate server token seed\
        \n* (ServerTokenSeed)seed = {\
        \n     purpose = "RevokeVc",\
        \n     walletInfo,\
        \n     caAppInfo\
        \n  }

ca -> tas ++: Request Create Token\n{seed}
    tas -> tas: Verify signatures\
            \n* Verify wallet signature\
            \n* Verify certified app provider signature
    tas -> tas: Generate and store server token\
            \n* Generate (ServerTokenData)std\
            \n* serverToken = sha256(std)
    tas -> tas: Encrypt response information\
            \n* iv = Generate IV\
            \n* tmp = enc(std, sesKey, iv)\
            \n* encStd = multibase(tmp)
return {iv, encStd}

ca -> ca: Decrypt (omitted) and prepare data\
        \n* Calculate serverToken


|||
== P220-4: Request Revoke VC ==
ca -> wal ++: Request Revoke VC\n{walletToken, serverToken, vcId,\
        \n issuerNonce, authType}
    wal -> wal: Validate walletToken
    wal -> wal: Validate vcId and issuerNonce
    wal -> wal: Prepare ReqRevokeVc data\
        \n* (ReqRevokeVc)reqRevokeVc = {\
        \n     vcId = Revoke VC ID,\
        \n     issuerNonce\
        \n  }
    user -[#Blue]\ wal: User authentication (non-standard)
    wal -> wal: signAuth(reqRevokeVc)
    wal -> tas ++: Request Revoke VC\n{serverToken, reqRevokeVc}
        tas -> tas: Validate serverToken
        tas -> vf ++: Revoke VC\n{reqRevokeVc}
            vf -> vf: Validate issuerNonce
            vf <-> BC: Retrieve Holder DID Doc
            vf -> vf: Verify reqRevokeVc signature
            vf -> BC++: Request VC status update
            return {result}
        return {result}
    return {result}
return {result}


|||
== P220-5: Confirm Revoke VC ==

ca -> tas ++: Confirm Revoke VC
    tas -> vf ++: Complete Revoke VC
    return OK
return OK

|||
|||
@enduml